AWSTemplateFormatVersion: '2010-09-09'
Description: Creates an Amazon Route 53 hosted zone
Parameters:
  HostedZone:
    Type: String
    Description: The DNS name of an Amazon Route 53 hosted zone e.g. jevsejev.io
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
  HostedZoneExists:
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
    Description: Parameter to determine if HostedZone needs to be created
  Environment:
    Type: String
    Description: Environment of hosted zone
  ClientSiteName:
    Type: String
    Description: Name of client 
  FullDomainName:
    Type: String
    Description: The full domain name e.g. www.vssdevelopment.com
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.

Conditions:
  CreateHostedZone: !Equals [!Ref HostedZoneExists, false]
Resources:
#######################################
## Route53 HostedZone record in AWS
##
#######################################
  DNS:
    Type: AWS::Route53::HostedZone
    Condition: CreateHostedZone
    Properties:
      HostedZoneConfig:
        Comment: !Join ['', ['Hosted zone for ', !Ref 'HostedZone']]
      Name: !Ref 'HostedZone'
      HostedZoneTags:
      - Key: TIER
        Value: !Ref Environment
      - Key: APP
        Value: AMAZONIAN

  WebsiteCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: 
        !Join [".", ["*", !Ref HostedZone]]
        
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref 'FullDomainName'
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
        
  AccessLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub log.${FullDomainName}
      NotificationConfiguration:
        TopicConfigurations:
        - Event:
            Ref: S3Event
          Topic:
            Ref: S3LogSNSTopic

  S3LogSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub StatsTopic${AWS::StackName}

  S3LogSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action:
          - SNS:Publish
          Resource: "*"
          Condition:
            ArnLike:
              aws:SourceArn:
                Fn::Join:
                - ''
                - - 'arn:aws:s3:*:*:'
                  - Ref: AccessLogBucket
      Topics:
      - Ref: S3LogSNSTopic
      
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'WebsiteBucket'
      PolicyDocument:
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource: !Join ['', ['arn:aws:s3:::', !Ref 'WebsiteBucket', /*]]
Outputs:
  WebsiteCertficationArn:
    Value: !Ref 'WebsiteCertificate'
    Export:
      Name: !Join ["-", [!Ref Environment,!Ref ClientSiteName, WebsiteCertArn]]
    Description: Certificate arn
  WebsiteBucketURL:
    Value: !GetAtt WebsiteBucket.WebsiteURL
    Export:
      Name: !Join ["-", [!Ref Environment, !Ref ClientSiteName, WebsiteURL]]
    Description: WebsiteBucketURL