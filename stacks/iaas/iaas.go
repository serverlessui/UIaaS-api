// Code generated by go-bindata. DO NOT EDIT.
// sources:
// iaas/cloudformation/fullSite.yml
// iaas/cloudformation/s3site.yml

package iaas

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fullsiteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x61\x6f\xdb\x36\x10\xfd\xae\x5f\x71\x49\x07\xa8\x0d\x2c\xcd\x9d\xdb\x01\x21\x06\x14\x9a\xe3\xa4\xd9\x52\xc7\xb0\x9c\x06\x88\xe1\x0f\xb4\x74\x72\x98\x51\xa4\x47\x52\x76\x92\xa2\xff\x7d\x10\x25\xcb\x94\xbd\x64\xc6\x30\x2c\x9f\x42\xde\xf1\xf8\xee\xdd\x7b\x94\xa3\xdb\x78\x82\xf9\x92\x53\x83\xe7\x52\xe5\xd4\x7c\x45\xa5\x99\x14\x04\xfc\x9f\xba\xef\xbb\x41\xf7\x34\xe8\x9e\xfa\xde\x19\xea\x44\xb1\xa5\xb1\x91\xbe\x42\x6a\x50\x03\x15\x10\xe5\xf4\x59\x0a\x18\xcb\xc2\x20\x7c\xec\xc1\xbd\xd4\x06\x53\x78\x96\x02\xbd\x11\x55\x34\x47\x83\x4a\x13\x0f\xe0\xb3\x8d\xdc\x49\x81\xe5\x0a\x60\xf2\xb4\x44\x02\xb1\x51\x4c\x2c\xec\x46\xeb\x8a\xc9\x3d\xc2\xd9\x30\x06\x41\x73\x04\x99\xfd\xc3\x55\x80\xe1\x22\x84\x07\x5c\x69\x7c\xc0\x55\xc8\xa4\x2d\x18\x71\x2e\xd7\x98\x8e\xa8\x31\xa8\x04\x81\xb7\x9f\x8e\x82\x77\x53\x1a\x3c\x47\xc1\x5d\x37\x38\x0d\xc2\xd9\xb7\xf7\x9d\x9f\x7b\xdf\xdf\x7e\xfa\xe5\x28\x78\x67\x8f\xf4\xa5\xd0\x46\x51\x26\x4c\x0b\x4d\x5e\x68\x03\x73\x04\x0a\x2b\xca\x59\x6a\x91\xd9\x7b\x4b\x78\x61\xab\xb9\xc1\x23\xd3\x46\xbf\xd0\x62\x8d\xe8\x2b\xe5\x05\xd6\x39\x00\x01\x18\x55\x60\xb3\xc8\x28\xd7\x58\x13\x92\xd1\x82\x1b\xd2\xda\x72\x50\x35\xfc\x82\x91\x90\x96\xff\xe4\x4c\x20\xb0\xcc\x81\x03\x02\x31\xd5\x65\xc2\x1c\x21\xb1\x73\x4b\x3d\x80\x81\x58\x31\x25\x45\x8e\xc2\x1c\x32\x0d\x27\xbd\x1c\x86\x3b\x64\x80\x3e\x67\x28\x4c\xcc\x0c\x0e\x69\x7e\xd0\x70\x87\xf5\x50\x13\x7b\x12\x3c\x80\xf3\x82\xf3\x33\x99\x53\x26\x0e\xad\x51\x0a\x24\x2b\x38\x87\xd4\x1e\xab\x84\x62\x65\xb0\x5e\xaf\xc3\x95\xd6\x29\xae\x90\xcb\x65\x89\x39\x4c\x64\xfe\xff\x2a\xc2\xeb\x4b\x91\xb2\x32\xd5\x8e\xb9\x32\x8c\xe3\x00\x38\x1a\xfc\x59\x50\xae\x61\x7a\x34\xc6\x6c\x4f\x3e\x9d\x6a\xe4\x33\x6f\x8c\x5a\x16\x2a\x29\xc5\xf2\xe6\xb0\x3f\xef\xcd\x9b\xca\x22\x1f\x7b\xae\x0c\x14\x26\x52\xa5\xc0\x04\x44\xb7\xb1\x67\xd3\x0e\x2b\x07\x65\x6b\xee\x40\xa2\xdb\x98\x90\xfa\x06\x42\xb6\x57\x6c\xd8\xaa\xda\x26\x7b\x3d\xdb\xf8\x48\xc9\x25\x2a\xc3\xb6\xea\xdf\x26\xf4\xa5\xc8\xd8\x62\xb3\x5f\xd6\xca\xad\x3e\xe1\xe8\x37\xc9\x04\x4c\x7d\xbf\x03\x53\xff\xb3\xe3\xfa\x4c\x2a\xf0\x3b\x60\x29\xf4\xb7\x85\xfc\xd9\xac\x2e\x62\xc5\xb4\x1f\xdf\xbb\x7a\x42\x17\x8e\x1d\x7f\xc7\x27\x02\x93\xcb\xc1\xb8\x81\x62\x0d\x5b\x17\x72\xbc\xd0\x3e\x11\x8d\x46\xbb\x07\xa2\x2f\xd1\xdd\xf5\xf0\x32\x1a\x7a\x1e\xc0\x2d\xce\x35\x33\xd8\x2f\xfb\xcf\x58\x42\x0d\xee\xd1\xea\xc4\xbe\x50\x41\x17\xa8\x5a\x7b\x2f\x50\xe8\x18\x07\x1a\x04\x35\x69\xc7\xe1\x71\x07\xa6\xc7\x27\xc7\x35\x4d\xdb\x9e\x1b\x92\x00\xb6\xe0\x7e\x2d\x92\x3f\xd0\xec\xe1\x8a\x7b\x84\x54\xa1\x17\x20\x54\x41\x97\xee\xb6\xa3\x37\x94\x47\x49\x82\x5a\xf7\xa5\x30\x4a\x72\x02\xa3\x62\xce\x59\x32\x46\x9a\xd6\xf1\x0d\x47\x56\x0a\x85\xa2\x56\x4a\x0d\xce\x4b\x91\xe2\xe3\x99\x4c\x8a\x4a\x17\xac\x5c\x86\xf7\x26\xe7\x4d\xc6\x40\x29\xa9\xb6\x19\x1f\xba\x1f\xda\x71\x6f\x03\xe1\x4a\x2e\xfe\x93\x5e\xe3\x62\x0e\x5c\x2e\xc2\x1f\xbe\xb5\x1b\xfe\x1e\xea\x5e\x48\xed\x17\x8b\xae\xb5\x7d\x80\x76\x59\x1e\x49\xce\x92\xa7\x57\xee\xaf\x12\x5e\x45\xb1\x61\xbb\x55\x78\x43\x76\x75\xbe\x61\xa3\x21\x21\x36\xd4\x60\x7b\x2b\x80\x98\xa5\xee\x3c\xce\xa5\xba\x40\x53\xd5\xbb\x9e\x3f\x60\x62\x74\x93\x0c\x30\xc8\x32\x4c\x0c\xa9\xde\x53\x67\x7f\xa4\x98\x48\xd8\x92\x72\x02\xfe\x89\xef\x04\xa2\xa4\x7a\x14\x74\x8f\x5c\x6c\x0a\x3a\xe1\xcd\x33\xb7\xe3\x75\xaa\x04\xa1\x6b\x4d\x74\x8f\x10\xd2\x18\xbd\xdd\x6b\x07\x7e\x3c\x99\xcd\xbc\xeb\xc2\x2c\x8b\xea\xbb\xeb\xf8\xcc\xda\x86\x49\x11\xa9\x5a\x45\xae\x91\xfd\x7d\x43\x56\x90\x07\x8f\x4b\xa9\x1a\x72\xea\x41\xd7\x76\x0a\x4a\x3b\xed\xbe\x03\x1d\xbb\xd1\xfe\x0e\x76\x5c\x1c\x91\x12\xb5\xdd\xda\xbf\xa3\xb6\x37\x03\x55\x62\x57\x20\x37\xe3\xab\x36\xea\x0b\x34\x91\x31\xed\xa4\xb0\x5e\xdd\x8c\xaf\xfe\x25\x78\x78\x0d\xfd\xcd\xf8\xea\xef\x90\xef\xe2\xfc\x2b\x00\x00\xff\xff\x2d\x93\x5a\x9f\x46\x0a\x00\x00")

func fullsiteYmlBytes() ([]byte, error) {
	return bindataRead(
		_fullsiteYml,
		"fullSite.yml",
	)
}

func fullsiteYml() (*asset, error) {
	bytes, err := fullsiteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fullSite.yml", size: 2630, mode: os.FileMode(420), modTime: time.Unix(1535818927, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0x8f, 0x37, 0x4e, 0x3b, 0xc5, 0x82, 0x5, 0xd3, 0x59, 0x95, 0xa1, 0xce, 0xb4, 0x44, 0x8, 0x42, 0xe4, 0x2c, 0xce, 0xdb, 0x26, 0xf3, 0xb1, 0x65, 0x49, 0x65, 0xb6, 0x79, 0x59, 0x84, 0xcc}}
	return a, nil
}

var _s3siteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x6d\x4f\xe3\x38\x10\xfe\xde\x5f\x31\xa0\x93\x0a\xa7\xa6\xdb\xa6\xc0\x1e\xd1\x49\xab\x34\x6d\x79\x59\x5a\xba\x4d\x80\x05\x84\x4e\x6e\x32\x4d\x7d\x9b\xd8\x91\xed\x50\xd8\xd5\xfe\xf7\x53\x9c\xb4\x49\xe8\xb2\xf0\xed\xf2\xc9\xf5\xbc\x3d\x1e\x3f\x33\xe3\xda\x37\xae\x87\x71\x12\x11\x85\x23\x2e\x62\xa2\xae\x51\x48\xca\x99\x05\x4d\xb3\xd3\xed\x18\x9d\x63\xa3\x73\xdc\x6c\x0c\x50\xfa\x82\x26\x4a\x4b\x1c\x81\x44\xa1\x04\xc2\xc0\xed\xc1\x3c\xf5\xbf\xa1\x02\x9f\xb3\x05\x0d\x53\x81\x01\x2c\xb8\x80\x25\x97\x8a\xb2\x10\x08\x48\x45\x14\xf5\x61\x85\x73\x49\x15\xb6\x80\xb0\x00\x08\xcc\x78\xaa\xb0\x01\x70\xd8\x83\xc1\xc4\x05\x81\x3e\x17\x01\x24\x9c\x32\x6d\xa6\x38\xa8\x25\x16\xbe\x1b\x53\x22\x48\x8c\x0a\x85\xb4\x1a\x00\xa7\x5c\x2a\x0c\xee\x38\xc3\xec\x17\x80\xf7\x9c\xa0\x05\xae\x12\x94\x85\x7a\xa3\x06\xd6\x5b\xa2\x8e\xc0\x48\x8c\xc0\x17\x19\x68\x7c\xa2\x39\x38\x3b\x26\xdf\x39\xcb\xb1\x64\x48\x96\xda\x33\x7c\xe7\x0c\x01\xdb\x61\x1b\x1e\xa5\x0c\xf0\x11\x23\x9e\xc4\xc8\x54\xdb\xe7\xb1\x0e\x60\x47\x11\x5f\x61\x30\x25\x4a\xa1\x60\x16\xec\x7d\xda\x31\xf6\xef\x89\xf1\xdd\x36\xee\x3a\xc6\xb1\xd1\x7e\xf8\xd1\x6d\x1d\xf5\x7e\xee\x7d\xfa\x7b\xc7\xd8\xd7\x26\x0e\x67\x52\x09\x42\x99\xaa\xa1\x8b\x53\xa9\x60\x8e\x40\xe0\x91\x44\x34\xd0\x48\x75\xf8\x0c\x6e\xbb\x01\x30\x4a\xa3\x68\xc0\x63\x42\xd9\x84\xc4\xef\x3e\xf0\x22\x8d\x22\x08\xb4\x59\x7e\x70\x7d\x9a\xd5\x6a\xd5\xfe\xff\x4f\x64\xfb\xb1\x83\x42\xd1\x05\xf5\x89\x42\x5b\xb0\xf7\x1c\x2a\x23\xc3\xfa\xb6\x50\xf2\x54\xf8\x08\x59\x42\x60\xcf\x9e\x4d\xf6\x8b\x7b\xb5\x6f\x5c\xa8\xb8\x86\x31\x61\x24\x44\x01\x7b\xb6\x33\xde\x07\xbf\x94\xb4\x7f\x79\xe6\x5d\x22\x98\x45\x56\xd2\x22\x7e\x6c\xb5\xff\xdc\x6d\x00\xdc\xe4\xa4\xed\x6b\x1a\x5e\xcd\x2e\xde\x03\xb5\xb0\x59\xd7\x45\x2a\xa2\x06\x80\x43\xfc\x25\x5e\x93\x28\x45\xcf\xab\x79\x99\xa4\xf1\x1c\x45\xe1\x65\x41\xd2\x48\x59\xd0\xeb\x74\xaa\x00\xb5\x99\xb4\x40\xef\x01\x18\x70\xd4\xd9\x2c\xbb\x66\xb9\x5e\x9b\xe5\x2a\xe5\xfa\xb8\x58\xd7\x59\xe2\x5d\x00\xd7\x6b\x09\xdd\x16\x98\x2d\x38\x6c\x41\xb7\xd3\x82\xee\x21\xc4\x94\xc9\x3c\x5a\x63\x4c\x92\x84\xb2\x50\xd7\xdd\x0c\x43\xca\xd9\x98\x24\x39\xfe\x54\x1a\x48\xa4\x32\xba\x56\x11\xc9\xed\x95\x95\x79\x16\x58\x70\xd7\xb3\xbf\xf4\x5d\xef\x64\x74\x7b\xee\x7a\xa3\xb5\xcd\x0a\x7f\x6b\x63\x8e\x0e\x8f\xae\xee\x2e\xcc\x71\xd7\x76\x06\x35\x1b\xf3\xf5\x38\xfd\xf3\xa3\xcf\x47\xb3\xb3\xb3\xcb\xc9\xc7\xb1\x56\xc2\xf4\xad\x38\xdd\xfe\x67\xc7\xfb\x3a\xf8\x78\x30\xbc\x9b\x0e\xb5\x12\x49\x0c\xc9\x53\xb5\x7c\xeb\x50\x97\x9d\x73\x73\xf0\xb5\x3f\xec\x8e\xbc\xfe\xb6\xe1\xeb\x28\xbb\x37\xce\xd9\xc9\xed\x99\x33\x31\xfb\xb7\x83\xb5\x21\xe3\xe2\xcd\x88\xe6\xf8\x60\x78\x7a\x35\x33\x8f\xa6\x1f\xef\x6e\xb4\x92\x24\x6f\xa6\xbe\x7b\x32\xf2\x3a\x57\x76\xf7\xcc\x3c\xbd\x6e\xac\x4b\x46\x5a\x8d\x92\xd4\x4e\xc4\xd3\x60\x21\x38\x53\x55\x3e\xda\x37\xae\x65\x69\xd1\x48\x8b\xac\x01\x95\x4a\xd0\x79\x9a\x51\x45\xeb\x4d\x05\x4f\xb2\x52\x42\xb9\x8e\x5e\x55\x71\xf4\x18\x58\x4b\xb2\x2e\x11\x67\x8d\xc6\x82\x32\x5c\x4d\xbf\xd6\xf2\x37\xd3\xa4\x34\x4f\xa5\xe2\xf1\x50\x08\x2e\x66\x28\x13\xce\x64\x19\x36\xe3\xb6\x96\x64\xc5\x45\x59\x38\xa6\x2c\x2b\xae\x4a\x1d\x64\x5f\xae\xc1\x03\xb4\xe0\xa0\x73\x50\x11\xac\xfd\xe5\x32\xb3\x66\xb4\x96\x4d\x49\x88\x53\xa2\x96\x16\xec\x7e\xa0\x2c\xc0\xa7\xf6\x52\xc5\xd1\xee\x46\xf3\x52\xd0\x90\xb2\x1a\xa2\x4a\xb3\x86\x1d\x17\x23\xf4\x15\xdc\x9b\x2d\xd8\x71\x93\x88\x2a\xb8\xdf\xfd\xb0\xdb\x82\x9d\x19\x2e\xb6\x9a\xcb\xc3\x43\x05\x41\x76\x8b\x6e\x2f\xf7\x5f\xd9\xce\xf3\x91\x6f\xbf\x4c\x75\xf6\x9d\x7a\xde\x74\xca\x85\xb2\xa0\xf9\x57\xa7\xb9\x25\x72\x0b\xd9\xc1\x41\xaf\x2e\xcc\x3d\x4e\x05\x57\xdc\xe7\xd1\x94\x47\xd4\x7f\xb6\x60\xa9\x54\x62\x70\x16\x3d\x6f\x74\x87\x8c\xcc\x23\x0c\x2c\x50\x22\xc5\xcd\xee\xa9\x52\x49\xf9\x6e\xc8\xac\xcc\xd2\x7d\xd1\xd6\x66\x9c\xab\xcb\xf9\xbf\xe8\x2b\x0b\xca\x54\x6e\xb4\xec\x88\x92\x17\x77\xab\x93\xd4\xac\x0f\xc0\xd2\xed\x05\x0f\x43\xca\x6a\xc7\xcf\x33\x99\xa5\x3d\x9d\x43\xc4\xc3\xf6\x1f\x3f\xea\xd6\x3f\xdb\xb2\xd7\x26\x7a\x8c\x90\x95\xdc\x0c\xbf\xfc\x9b\x0a\x5c\xd0\x27\x0b\x88\xef\xa3\x94\x55\x06\xfd\xf2\xcc\x00\x67\xcc\x8f\xd2\x00\x1d\xce\xbf\x65\xc5\x00\x0b\x12\x49\x7c\x79\x6c\xdd\xf8\xfb\xb8\x24\x8f\x94\x8b\x2a\xd8\xa2\xb9\x8f\x51\x2d\x79\x20\xab\x12\x03\x4e\x86\x5e\xed\xf7\xe9\xd0\x1e\x54\x36\x0a\xd7\x9a\xec\x3a\x49\xb5\xe9\x52\x51\x1c\x93\xa7\x77\x28\x15\x65\xf3\x5b\x25\x87\xc7\x89\x40\x29\xb7\x92\xe0\x11\x11\xa2\xca\xe9\xf3\x0a\x67\x47\x5c\xac\x88\x08\x36\x83\xac\x46\xbc\x2f\x29\x8a\xe7\x7c\x94\x6e\xf9\xce\xc2\xe6\xb9\xad\x6d\x6e\x3c\x5a\xc0\x38\xab\x1a\x5c\x53\x5c\xa1\x78\xc9\x62\x81\x01\x15\xe8\x2b\x43\x71\x23\xe3\x66\x79\xb7\x53\x41\x7d\x74\x22\x92\x9d\xab\x5c\xff\x63\x47\x25\x2f\x73\x97\x95\x57\x45\xed\x0e\xb7\x9e\x32\x79\x16\xb7\xf6\x2b\x36\xae\x8c\xdc\x34\x49\xb8\x50\xf9\xd5\x5b\x20\x19\xcd\x8b\xac\xec\xcd\x83\x89\xfb\xf2\xb9\xa7\x1b\xb3\x7e\xa9\x1e\xf6\x2c\x6b\xa6\xdf\xcb\x2e\xaa\x13\xc1\xd3\xe4\x95\xbe\x5c\xce\x84\xa2\x1d\x9d\x73\xca\xe0\xbe\xd9\x6c\xc1\x7d\x5e\x5c\xa5\x46\xb3\x05\xed\x4d\x03\xda\x78\xdf\xb8\x32\xa0\x70\xf1\xdb\x9a\x2c\x90\xd6\x8b\x3a\x67\x48\x35\x6d\x5b\x23\x7f\xe0\x4d\x06\xb6\x67\x7f\xb9\xbd\x31\xab\x34\x2f\x92\x00\x3b\x27\xa8\x6c\xa5\xe0\x7e\x6b\x72\xb5\x2a\xed\xf6\xa1\x71\x99\xaa\x24\xcd\x31\x97\x2a\x43\x16\xe8\x11\x93\x03\xd0\x14\x7c\xbf\x47\x78\xf9\x6c\x5a\x7b\xd3\xff\x71\x2a\x23\x2d\xa8\x4f\xc9\x32\x41\xf5\xb0\xaf\x66\xaf\x16\x24\x53\xa8\xc0\x68\x34\xfe\x0b\x00\x00\xff\xff\x3a\x06\x7f\xb9\xa5\x0d\x00\x00")

func s3siteYmlBytes() ([]byte, error) {
	return bindataRead(
		_s3siteYml,
		"s3site.yml",
	)
}

func s3siteYml() (*asset, error) {
	bytes, err := s3siteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "s3site.yml", size: 3493, mode: os.FileMode(420), modTime: time.Unix(1535817248, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0x3d, 0x91, 0x3d, 0xcf, 0x3d, 0xc8, 0xa9, 0x40, 0x24, 0x37, 0x87, 0x92, 0x73, 0xa5, 0x22, 0x65, 0x8b, 0xa1, 0xb7, 0xe, 0x18, 0x34, 0xd1, 0x46, 0xde, 0xd4, 0xfd, 0x39, 0x7f, 0xec, 0xde}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fullSite.yml": fullsiteYml,

	"s3site.yml": s3siteYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fullSite.yml": &bintree{fullsiteYml, map[string]*bintree{}},
	"s3site.yml":   &bintree{s3siteYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
