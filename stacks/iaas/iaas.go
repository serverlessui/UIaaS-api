// Code generated by go-bindata. DO NOT EDIT.
// sources:
// iaas/cloudformation/fullSite.yml
// iaas/cloudformation/s3site.yml

package iaas

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fullsiteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x61\x6f\xdb\x36\x10\xfd\xae\x5f\x71\x49\x06\xa8\x0d\x2c\xcd\x9d\xdb\x01\x21\x06\x14\x9a\xe3\xa4\xd9\xd2\xc4\xb0\x9c\x06\x88\xe1\x0f\xb4\x74\x72\x98\x51\xa4\x47\x52\x76\x92\xa2\xff\x7d\x10\x25\xcb\x94\xbd\x64\xc6\x30\xac\xf9\x14\xf2\x8e\xc7\x77\xef\xde\xa3\x1c\xdd\xc6\x63\xcc\x17\x9c\x1a\x3c\x93\x2a\xa7\xe6\x0b\x2a\xcd\xa4\x20\xe0\xff\xd4\x7d\xd7\x0d\xba\x27\x41\xf7\xc4\xf7\x4e\x51\x27\x8a\x2d\x8c\x8d\xf4\x15\x52\x83\x1a\xa8\x80\x28\xa7\xcf\x52\xc0\x48\x16\x06\xe1\x43\x0f\xee\xa5\x36\x98\xc2\xb3\x14\xe8\x0d\xa9\xa2\x39\x1a\x54\x9a\x78\x00\x9f\x6c\xe4\x4e\x0a\x2c\x57\x00\xe3\xa7\x05\x12\x88\x8d\x62\x62\x6e\x37\x5a\x57\x8c\xef\x11\x4e\xaf\x62\x10\x34\x47\x90\xd9\x3f\x5c\x05\x18\xce\x43\x78\xc0\xa5\xc6\x07\x5c\x86\x4c\xda\x82\x11\xe7\x72\x85\xe9\x90\x1a\x83\x4a\x10\x78\xf3\xf1\x20\x78\x3b\xa1\xc1\x73\x14\xdc\x75\x83\x93\x20\x9c\x7e\x7d\xd7\xf9\xb9\xf7\xed\xcd\xc7\x5f\x0e\x82\xb7\xf6\x48\x5f\x0a\x6d\x14\x65\xc2\xb4\xd0\xe4\x85\x36\x30\x43\xa0\xb0\xa4\x9c\xa5\x16\x99\xbd\xb7\x84\x17\xb6\x9a\x1b\x3c\x32\x6d\xf4\x0b\x2d\xd6\x88\xbe\x50\x5e\x60\x9d\x03\x10\x80\x51\x05\x36\x8b\x8c\x72\x8d\x35\x21\x19\x2d\xb8\x21\xad\x2d\x07\x55\xc3\x2f\x18\x09\x69\xf9\x4f\xce\x04\x02\xcb\x1c\x38\x20\x10\x53\x5d\x26\xcc\x10\x12\x3b\xb7\xd4\x03\x18\x88\x25\x53\x52\xe4\x28\xcc\x3e\xd3\x70\xd2\xcb\x61\xb8\x43\x06\xe8\x73\x86\xc2\xc4\xcc\xe0\x15\xcd\xf7\x1a\xee\x55\x3d\xd4\xc4\x9e\x04\x0f\xe0\xac\xe0\xfc\x54\xe6\x94\x89\x7d\x6b\x94\x02\xc9\x0a\xce\x21\xb5\xc7\x2a\xa1\x58\x19\xac\x56\xab\x70\xa9\x75\x8a\x4b\xe4\x72\x51\x62\x0e\x13\x99\xff\xbf\x8a\xf0\xfa\x52\xa4\xac\x4c\xb5\x63\xae\x0c\xe3\x38\x00\x0e\x06\x7f\x16\x94\x6b\x98\x1c\x8c\x30\xdb\x91\x4f\xa7\x1a\xf9\xd4\x1b\xa1\x96\x85\x4a\x4a\xb1\x1c\xed\xf7\xe7\x1d\x1d\x55\x16\xf9\xd0\x73\x65\xa0\x30\x91\x2a\x05\x26\x20\xba\x8d\x3d\x9b\xb6\x5f\x39\x28\x5b\x73\x07\x12\xdd\xc6\x84\xd4\x37\x10\xb2\xb9\x62\xcd\x56\xd5\x36\xd9\xe9\xd9\xc6\x87\x4a\x2e\x50\x19\xb6\x51\xff\x26\xa1\x2f\x45\xc6\xe6\xeb\xfd\xb2\x56\x6e\xf5\x09\x07\xbf\x49\x26\x60\xe2\xfb\x1d\x98\xf8\x9f\x1c\xd7\x67\x52\x81\xdf\x01\x4b\xa1\xbf\x29\xe4\x4f\xa7\x75\x11\x2b\xa6\xdd\xf8\xce\xd5\x63\x3a\x77\xec\xf8\x3b\x3e\x11\x18\x5f\x0c\x46\x0d\x14\x6b\xd8\xba\x90\xe3\x85\xf6\x89\x68\x38\xdc\x3e\x10\x7d\x8e\xee\xae\xaf\x2e\xa2\x2b\xcf\x03\xb8\xc5\x99\x66\x06\xfb\x65\xff\x19\x4b\xa8\xc1\x1d\x5a\x9d\xd8\x67\x2a\xe8\x1c\x55\x6b\xef\x05\x0a\x1d\xe3\x40\x83\xa0\x26\xed\x30\x3c\xec\xc0\xe4\xf0\xf8\xb0\xa6\x69\xd3\x73\x43\x12\xc0\x06\xdc\xaf\x45\xf2\x07\x9a\x1d\x5c\x71\x8f\x90\x2a\xf4\x02\x84\x2a\xe8\xd2\xdd\x76\xf4\x9a\xf2\x28\x49\x50\xeb\xbe\x14\x46\x49\x4e\x60\x58\xcc\x38\x4b\x46\x48\xd3\x3a\xbe\xe6\xc8\x4a\xa1\x50\xd4\x4a\xa9\xc1\x79\x21\x52\x7c\x3c\x95\x49\x51\xe9\x82\x95\xcb\xf0\xde\xe4\xbc\xc9\x18\x28\x25\xd5\x26\xe3\x7d\xf7\x7d\x3b\xee\xad\x21\x5c\xca\xf9\x7f\xd2\x6b\x5c\xcc\x80\xcb\x79\xf8\xc3\xd7\x76\xc3\xdf\xbe\x73\xc3\xdb\x23\x1d\x4a\xce\x92\xa7\x57\x9a\xad\x12\x5e\x6d\x79\x3d\xda\x56\xe1\xf5\x64\xab\xf3\x0d\x92\x06\x60\x6c\xa8\xc1\xf6\x56\x00\x31\x4b\x5d\x2e\xce\xa4\x3a\x47\x53\xd5\xbb\x9e\x3d\x60\x62\x74\x93\x0c\x30\xc8\x32\x4c\x0c\xa9\x1e\x6f\x67\x7f\xa8\x98\x48\xd8\x82\x72\x02\xfe\xb1\xef\x04\xa2\xa4\x7a\x81\x74\x8f\x9c\xaf\x0b\x3a\xe1\xf5\x9b\xba\xf5\xb0\x50\x25\x08\x5d\x69\xa2\x7b\x84\x90\xe6\x55\x69\xf7\xda\x81\x1f\x8f\xa7\x53\xef\xba\x30\x8b\xa2\xfa\xc8\x3b\xa6\xb6\x1e\x65\x52\x44\xaa\x9e\xa0\xfb\x6a\xf8\xbb\xee\xaf\x20\x0f\x1e\x17\x52\x35\xe4\xd4\xaa\xaa\xbd\x1b\x94\xde\xdd\x7e\x74\x3a\x76\xa3\xfd\xd1\xed\xb8\x38\x22\x25\x6a\x6f\xb7\x7f\xb4\x6d\x6e\x06\xaa\xc4\xb6\x40\x6e\x46\x97\x6d\xd4\xe7\x68\x22\x63\xda\x49\x61\xbd\xba\x19\x5d\xfe\x4b\xf0\xf0\x1a\xfa\x9b\xd1\xe5\xdf\x21\xdf\xc6\xf9\x57\x00\x00\x00\xff\xff\xf1\xf3\x74\x33\xb3\x0a\x00\x00")

func fullsiteYmlBytes() ([]byte, error) {
	return bindataRead(
		_fullsiteYml,
		"fullSite.yml",
	)
}

func fullsiteYml() (*asset, error) {
	bytes, err := fullsiteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fullSite.yml", size: 2739, mode: os.FileMode(420), modTime: time.Unix(1535211663, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0x8c, 0x9c, 0x1e, 0xcb, 0x50, 0xa9, 0x13, 0xb5, 0x86, 0xda, 0x10, 0xb9, 0x9d, 0xf2, 0x3c, 0xae, 0xce, 0x74, 0x69, 0xc5, 0x3d, 0x97, 0xc7, 0x3b, 0xe7, 0xe9, 0x70, 0x37, 0x3e, 0xc8, 0x7f}}
	return a, nil
}

var _s3siteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5d\x4f\xe3\xbc\x12\xbe\xef\xaf\x18\xd0\x91\x0a\x47\x4d\xb6\x4d\x81\x3d\x44\x47\x5a\xa5\x5f\x7c\x2c\x2d\xdd\x26\xc0\x02\x42\x47\x6e\x32\x4d\x7d\x36\xb1\x23\xdb\xa1\xb0\xab\xfd\xef\xaf\xe2\xa4\x4d\xd2\xbe\x2c\xdc\xbd\xbd\x72\x3c\x5f\x8f\xc7\xcf\xcc\xb8\xce\x9d\xeb\x61\x9c\x44\x44\xe1\x88\x8b\x98\xa8\x5b\x14\x92\x72\x66\x43\xd3\x6a\x77\xda\x46\xfb\xd4\x68\x9f\x36\x1b\x03\x94\xbe\xa0\x89\xd2\x92\xbe\x40\xa2\x50\x02\x61\xe0\x76\x61\x9e\xfa\x3f\x50\x81\xcf\xd9\x82\x86\xa9\xc0\x00\x16\x5c\xc0\x92\x4b\x45\x59\x08\x04\xa4\x22\x8a\xfa\xb0\xc2\xb9\xa4\x0a\x5b\x40\x58\x00\x04\x66\x3c\x55\xd8\x00\x38\xee\xc2\x60\xe2\x82\x40\x9f\x8b\x00\x12\x4e\x99\x36\x53\x1c\xd4\x12\x0b\xdf\x8d\x29\x11\x24\x46\x85\x42\xda\x0d\x80\x73\x2e\x15\x06\x0f\x9c\x61\xf6\x05\xe0\xbd\x26\x68\x83\xab\x04\x65\xa1\xde\xa8\x81\xf5\x96\xa8\x23\x30\x12\x23\xf0\x45\x06\x1a\x5f\x68\x0e\xce\x89\xc9\x4f\xce\x72\x2c\x19\x92\xa5\xf6\x0c\x3f\x39\x43\x40\x33\x34\xe1\x59\xca\x00\x9f\x31\xe2\x49\x8c\x4c\x99\x3e\x8f\x75\x00\x27\x8a\xf8\x0a\x83\x29\x51\x0a\x05\xb3\xe1\xe0\xcb\x9e\x71\xf8\x48\x8c\x9f\x8e\xf1\xd0\x36\x4e\x0d\xf3\xe9\x57\xa7\x75\xd2\xfd\x7d\xf0\xe5\xbf\x7b\xc6\xa1\x36\xe9\x73\x26\x95\x20\x94\xa9\x1a\xba\x38\x95\x0a\xe6\x08\x04\x9e\x49\x44\x03\x8d\x54\x87\xcf\xe0\x9a\x0d\x80\x51\x1a\x45\x03\x1e\x13\xca\x26\x24\xfe\xf0\x81\x17\x69\x14\x41\xa0\xcd\xf2\x83\xeb\xd3\xac\x56\x2b\xf3\x9f\x3f\x91\xe3\xc7\x7d\x14\x8a\x2e\xa8\x4f\x14\x3a\x82\x7d\xe4\x50\x19\x19\xd6\xb7\x85\x92\xa7\xc2\x47\xc8\x12\x02\x07\xce\x6c\x72\x58\xdc\xab\x73\xe7\x42\xc5\x35\x8c\x09\x23\x21\x0a\x38\x70\xfa\xe3\x43\xf0\x4b\x89\xf9\xb7\x67\xde\x27\x82\xd9\x64\x25\x6d\xe2\xc7\xb6\xf9\xef\xfd\x06\xc0\x5d\x4e\xda\x9e\xa6\xe1\xcd\xec\xea\x23\x50\x0b\x9b\x75\x5d\xa4\x22\x6a\x00\xf4\x89\xbf\xc4\x5b\x12\xa5\xe8\x79\x35\x2f\x93\x34\x9e\xa3\x28\xbc\x2c\x48\x1a\x29\x1b\xba\xed\x76\x15\xa0\x36\x93\x36\xe8\x3d\x00\x03\x4e\xda\x9b\x65\xc7\x2a\xd7\x6b\xb3\x5c\xa5\x5c\x9f\x16\xeb\x3a\x4b\xbc\x2b\xe0\x7a\x2d\xa1\xd3\x02\xab\x05\xc7\x2d\xe8\xb4\x5b\xd0\x39\x86\x98\x32\x99\x47\x6b\x8c\x49\x92\x50\x16\xea\xba\x9b\x61\x48\x39\x1b\x93\x24\xc7\x9f\x4a\x03\x89\x54\x46\xc7\x2e\x22\xb9\xdd\xb2\x32\x2f\x02\x1b\x1e\xba\xce\xb7\x9e\xeb\x9d\x8d\xee\x2f\x5d\x6f\xb4\xb6\x59\xe1\x1f\x6d\xac\xd1\xf1\xc9\xcd\xc3\x95\x35\xee\x38\xfd\x41\xcd\xc6\x7a\x3b\x4e\xef\xf2\xe4\xeb\xc9\xec\xe2\xe2\x7a\xf2\x79\xac\x95\x30\x7d\x2f\x4e\xa7\xf7\xb5\xef\x7d\x1f\x7c\x3e\x1a\x3e\x4c\x87\x5a\x89\x24\x86\xe4\xa9\x5a\xbe\x77\xa8\xeb\xf6\xa5\x35\xf8\xde\x1b\x76\x46\x5e\x6f\xd7\xf0\x6d\x94\x9d\xbb\xfe\xc5\xd9\xfd\x45\x7f\x62\xf5\xee\x07\x6b\x43\xc6\xc5\xbb\x11\xad\xf1\xd1\xf0\xfc\x66\x66\x9d\x4c\x3f\x3f\xdc\x69\x25\x49\xde\x4d\x7d\xe7\x6c\xe4\xb5\x6f\x9c\xce\x85\x75\x7e\xdb\x58\x97\x8c\xb4\x1b\x25\xa9\xfb\x11\x4f\x83\x85\xe0\x4c\x55\xf9\xe8\xdc\xb9\xb6\xad\x45\x23\x2d\xb2\x07\x54\x2a\x41\xe7\x69\x46\x15\xad\x37\x15\x3c\xc9\x4a\x09\xe5\x3a\x7a\x55\xa5\xaf\xc7\xc0\x5a\x92\x75\x89\x38\x6b\x34\x36\x94\xe1\x6a\xfa\xb5\x96\xbf\x99\x26\xa5\x79\x2a\x15\x8f\x87\x42\x70\x31\x43\x99\x70\x26\xcb\xb0\x19\xb7\xb5\x24\x2b\x2e\xca\xc2\x31\x65\x59\x71\x55\xea\x20\xfb\xe5\x1a\x3c\x40\x1b\x8e\xda\x47\x15\xc1\xda\x5f\x2e\xb3\x6a\x46\x6b\xd9\x94\x84\x38\x25\x6a\x69\xc3\xfe\x27\xca\x02\x7c\x31\x97\x2a\x8e\xf6\x37\x9a\xd7\x82\x86\x94\xd5\x10\x55\x9a\x35\xec\xb9\x18\xa1\xaf\xe0\xd1\x6a\xc1\x9e\x9b\x44\x54\xc1\xe3\xfe\xa7\xfd\x16\xec\xcd\x70\xb1\xd3\x5c\x9e\x9e\x2a\x08\xb2\x5b\x74\xbb\xb9\xff\xca\x76\x9e\x8f\x7c\x7b\x3b\xd5\xd9\xef\xdc\xf3\xa6\x53\x2e\x94\x0d\xcd\xff\xb4\x9b\x3b\x22\xb7\x90\x1d\x1d\x75\xeb\xc2\xdc\xe3\x54\x70\xc5\x7d\x1e\x4d\x79\x44\xfd\x57\x1b\x96\x4a\x25\x06\x67\xd1\xeb\x46\x77\xc8\xc8\x3c\xc2\xc0\x06\x25\x52\xdc\xec\x9e\x2b\x95\x94\xef\x86\xcc\xca\x2a\xdd\x17\x6d\x6d\xc6\xb9\xba\x9e\xff\x1f\x7d\x65\x43\x99\xca\x8d\x96\x13\x51\xb2\x75\xb7\x3a\x49\xcd\xfa\x00\x2c\xdd\x5e\xf1\x30\xa4\xac\x76\xfc\x3c\x93\x59\xda\xd3\x39\x44\x3c\x34\xff\xf5\xab\x6e\xfd\xdb\x94\x5d\x93\xe8\x31\x42\x56\x32\x1b\x7e\x66\xc5\x7c\x2a\x70\x41\x5f\x6c\x20\xbe\x8f\x52\x6e\xe3\xd7\x1d\xbc\x87\x4b\xf2\x4c\xb9\xa8\x46\x2d\xba\xf4\x18\xd5\x92\x07\xb2\x2a\x31\xe0\x6c\xe8\xd5\xbe\xcf\x87\xce\xa0\xb2\x51\xb8\xd6\xac\xd5\xa7\xad\x8d\x89\x8a\xe2\x98\xbc\x7c\x40\xa9\xe0\xff\x1f\x95\xfa\x3c\x4e\x04\x4a\xb9\x75\x83\x00\x1e\x11\x21\xaa\x9c\x07\x6f\x90\x6f\xc4\xc5\x8a\x88\x60\x33\x91\x6a\x0c\xfa\x96\xa2\x78\xcd\x67\xe2\x8e\xef\x2c\x2c\xff\x41\xb7\x4d\x36\x1e\x6d\x60\x9c\x55\x0d\x6e\x29\xae\x50\x6c\xd3\x51\x60\x40\x05\xfa\xca\x50\xdc\xc8\x48\x56\xde\xd1\x54\x50\x1f\xfb\x11\xc9\xce\x55\xae\xff\xe7\x44\x25\xc1\x72\x97\x95\xe7\x41\xed\x0e\x77\xde\x24\x79\x16\x77\xf6\x2b\x36\xae\x8c\xdc\x34\x49\xb8\x50\xf9\xd5\xdb\x20\x19\xcd\xab\xa5\x6c\xb2\x83\x89\xbb\xfd\x6e\xd3\x1d\x56\x3f\x39\x8f\xbb\xb6\x3d\xd3\x0f\x5f\x17\xd5\x99\xe0\x69\xf2\x46\x83\x2d\x9b\x7b\xd1\x57\x2e\x39\x65\xf0\xd8\x6c\xb6\xe0\x31\xaf\x92\x52\xa3\xd9\x02\x73\xd3\x49\x36\xde\x37\xae\x0c\x28\x5c\xfc\xb1\xb8\x0a\xa4\xf5\xea\xcc\x19\x52\x4d\xdb\xce\xec\x1e\x78\x93\x81\xe3\x39\xdf\xee\xef\xac\x2a\xcd\x8b\x24\xc0\xde\x19\x2a\x47\x29\x78\xdc\x19\x41\xad\x4a\xdf\x7c\x6a\x5c\xa7\x2a\x49\x73\xcc\xa5\xca\x90\x05\x7a\x56\xe4\x00\x34\x05\x3f\xee\x11\xb6\xdf\x3f\x6b\x6f\xfa\xcf\x4a\x65\x36\x05\xf5\x71\x57\x26\xa8\x1e\xf6\xcd\xec\xd5\x82\x64\x0a\x15\x18\x8d\xc6\x5f\x01\x00\x00\xff\xff\x64\x9e\x58\xdc\x6e\x0d\x00\x00")

func s3siteYmlBytes() ([]byte, error) {
	return bindataRead(
		_s3siteYml,
		"s3site.yml",
	)
}

func s3siteYml() (*asset, error) {
	bytes, err := s3siteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "s3site.yml", size: 3438, mode: os.FileMode(420), modTime: time.Unix(1535750942, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0xad, 0x49, 0x44, 0x45, 0x47, 0x4e, 0xe0, 0xb5, 0x3d, 0x32, 0x5f, 0x98, 0x18, 0xbf, 0x63, 0xb3, 0x8c, 0x23, 0x47, 0xea, 0x78, 0x1e, 0x0, 0x58, 0x12, 0x74, 0x81, 0x5a, 0x43, 0xdb, 0xb2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fullSite.yml": fullsiteYml,

	"s3site.yml": s3siteYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fullSite.yml": &bintree{fullsiteYml, map[string]*bintree{}},
	"s3site.yml":   &bintree{s3siteYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
