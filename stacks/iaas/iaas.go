// Code generated by go-bindata. DO NOT EDIT.
// sources:
// iaas/cloudformation/fullSite.yml
// iaas/cloudformation/s3site.yml

package iaas

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fullsiteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x6d\x6f\xdb\x36\x10\xfe\xae\x5f\x71\x71\x0b\xa8\x35\x2c\xcd\xa9\xdb\x0d\x25\x06\x14\x9a\xe3\xb4\xdd\x5c\xd7\xb0\xdc\x06\x68\xe0\x0f\xb4\x74\x72\x98\x48\xa4\x47\x52\x76\x5e\xd0\xff\x3e\x88\x92\x65\xca\x2f\x49\x30\x0c\xf3\xa7\x88\xcf\xe9\xee\xb9\xbb\xe7\x78\x4a\x70\x11\x4e\x31\x5b\xa6\x54\xe3\xb9\x90\x19\xd5\xdf\x51\x2a\x26\x38\x01\xf7\x4d\xf7\xb4\xeb\x75\xdf\x7b\xdd\xf7\xae\x73\x86\x2a\x92\x6c\xa9\x0d\xd2\x97\x48\x35\x2a\xa0\x1c\x82\x8c\xde\x0b\x0e\x13\x91\x6b\x84\x77\x3d\xb8\x12\x4a\x63\x0c\xf7\x82\xa3\x33\xa6\x92\x66\xa8\x51\x2a\xe2\x00\x7c\x32\xc8\x0f\xc1\xb1\x78\x02\x98\xde\x2d\x91\x40\xa8\x25\xe3\x0b\x73\xd0\x08\x31\xbd\x42\x38\x1b\x85\xc0\x69\x86\x20\x92\x27\x42\x01\xfa\x0b\x1f\xae\x71\xa5\xf0\x1a\x57\x3e\x13\xc6\x61\x90\xa6\x62\x8d\xf1\x98\x6a\x8d\x92\x13\x78\xf5\xe1\xc4\x7b\x7d\x49\xbd\xfb\xc0\xfb\xd1\xf5\xde\x7b\xfe\xec\xe1\xb4\xf3\x6b\xef\xe7\xab\x0f\xbf\x9f\x78\xaf\xcd\x2b\x7d\xc1\x95\x96\x94\x71\xdd\x60\x93\xe5\x4a\xc3\x1c\x81\xc2\x8a\xa6\x2c\x36\xcc\x4c\xdc\x82\x9e\xdf\x48\x6e\x70\xcb\x94\x56\x47\x52\xac\x18\x7d\xa7\x69\x8e\x95\x0d\x80\x07\x5a\xe6\x58\x3f\x24\x34\x55\x58\x15\x24\xa1\x79\xaa\x49\xe3\xc8\x62\x55\xd7\x17\xb4\x80\xb8\xf8\x23\x63\x1c\x81\x25\x16\x1d\xe0\x88\xb1\x2a\x0c\xe6\x08\x91\xe9\x5b\xec\x00\x0c\xf8\x8a\x49\xc1\x33\xe4\xfa\x39\xdd\xb0\xcc\x8b\x66\xd8\x4d\x06\xe8\xa7\x0c\xb9\x0e\x99\xc6\x11\xcd\x9e\xd5\xdc\x51\xd5\xd4\xc8\xbc\x09\x0e\xc0\x79\x9e\xa6\x67\x22\xa3\x8c\x3f\xd7\x47\x21\x90\x24\x4f\x53\x88\xcd\x6b\xa5\x50\x8c\x0c\xd6\xeb\xb5\xbf\x52\x2a\xc6\x15\xa6\x62\x59\x70\xf6\x23\x91\xfd\xbf\x8a\x70\xfa\x82\xc7\xac\x30\x35\x6d\x2e\x07\xc6\x9a\x00\x38\x19\xfc\x9d\xd3\x54\xc1\xe5\xc9\x04\x93\x3d\xf9\x74\xca\x96\xcf\x9c\x09\x2a\x91\xcb\xa8\x10\xcb\x8b\xe7\xfd\x9c\x17\x2f\xca\x11\x79\xd7\xb3\x65\x20\x31\x12\x32\x06\xc6\x21\xb8\x08\x1d\x63\xf6\x3c\x77\x50\xa4\x66\x37\x24\xb8\x08\x09\xa9\x22\x10\xb2\x0d\xb1\xa9\x56\x99\x36\xd9\xcb\xd9\xe0\x63\x29\x96\x28\x35\xdb\xaa\x7f\x6b\xd0\x17\x3c\x61\x8b\xcd\x79\xe1\x2b\x33\xfa\x84\x93\x3f\x05\xe3\x70\xe9\xba\x1d\xb8\x74\x3f\x59\x53\x9f\x08\x09\x6e\x07\x4c\x09\xdd\xad\x23\x77\x36\xab\x9c\x18\x31\xed\xe3\x7b\xa1\xa7\x74\x61\x8d\xe3\x5f\x78\x47\x60\xfa\x79\x30\xa9\xa9\x98\x81\xad\x1c\x59\xb3\xd0\x7c\x23\x18\x8f\x77\x5f\x08\xbe\x04\x3f\xbe\x8e\x3e\x07\x23\xc7\x01\xb8\xc0\xb9\x62\x1a\xfb\x45\xfe\x09\x8b\xa8\xc6\xbd\xb2\x5a\xd8\x17\xca\xe9\x02\x65\xe3\xec\x48\x09\xad\xc1\x81\x9a\x41\x55\xb4\x96\xdf\xea\xc0\x65\xab\xdd\xaa\xca\xb4\xcd\xb9\x2e\x12\xc0\x96\xdc\x1f\x79\x74\x83\x7a\x8f\x57\xd8\x23\xa4\x84\x8e\x50\x28\x41\xbb\xdc\xcd\x89\xde\x94\x3c\x88\x22\x54\xaa\x2f\xb8\x96\x22\x25\x30\xce\xe7\x29\x8b\x26\x48\xe3\x0a\xdf\xd4\xc8\x48\x21\x97\xd4\x48\xa9\xe6\xf9\x99\xc7\x78\x7b\x26\xa2\xbc\xd4\x05\x2b\x1e\xfd\x2b\x9d\xa5\xb5\xc5\x40\x4a\x21\xb7\x16\x6f\xbb\x6f\x9b\xb8\xb3\xa1\x30\x14\x8b\xff\x24\xd7\x30\x9f\x43\x2a\x16\xfe\xcb\x87\x66\xc2\x3f\x37\x0a\x14\x55\xf3\x98\xe0\x47\xb2\x9a\x8a\x25\x8b\x1a\x98\xda\x82\x1e\x0c\x56\xf5\x25\xbd\xf9\x4d\x30\x21\x10\xf6\x0c\x62\x01\xc6\xd1\x41\xcb\xa1\x58\x84\xa3\xd0\xe0\x85\x12\x1b\x07\xfb\x05\x18\x85\x84\x94\xb6\x87\x0b\x60\x30\x2b\xff\x50\x53\xad\xcc\xe1\xcb\x87\xd2\x83\xa6\xd1\x4d\x59\x85\xdd\x68\x63\x91\xb2\xe8\xee\x91\x98\xa5\xc1\x91\xc8\x25\x58\xf7\x77\x3b\x6e\xf6\x37\xcb\x1b\xef\xb4\xeb\x9d\xfe\xe6\xd6\x68\xc1\x0f\x9b\x2f\x78\x30\x48\x12\x8c\x34\x29\x57\x82\x55\xb3\xb1\x64\x3c\x62\x4b\x9a\x36\x0b\x19\xa2\x5c\xb1\x08\x09\xa8\x9e\x4f\xcd\x87\x08\x5d\xab\x7a\xaf\x6c\xc4\xdd\x6c\x6c\x11\xa6\x48\xcc\xa8\x5c\x5d\x39\x76\x5b\xca\x6b\x9d\x40\xab\xdd\xb2\xce\xb7\xd7\x67\x23\x78\x20\xf9\x90\xdd\x60\xf3\x10\x80\xae\x15\x09\x8d\x9f\x40\xf2\x5d\x10\xe0\x9c\x13\x52\x5c\x02\xfb\x88\x07\xae\x7b\xe0\xd0\x03\x97\x4a\x4e\x0a\xb7\xaa\x47\xda\xa4\x4d\xf6\xad\x0a\x3b\x23\xaa\x9d\x31\xb2\xa5\x61\x5d\xa5\x07\xf4\x57\x42\xbb\x57\xce\x31\x5d\xd4\xc3\xf8\xa8\x2e\xaa\x51\xae\xae\x9e\x86\x63\xf7\x09\xe9\x1c\x14\x47\xc8\x62\xfb\x72\x3a\x17\xf2\x23\xea\xd2\xdf\xd7\xf9\x35\x46\x5a\x59\x85\x79\x5a\x49\xe0\xb6\xdd\x7d\x9d\x80\xea\x91\x8f\x1b\x87\x07\xc5\xd1\x58\x7c\x56\x6b\x08\xa9\xb7\x5e\x33\xd7\x0e\xfc\xd2\x9e\xcd\x9c\xaf\xb9\x5e\xe6\xe5\x47\xa8\xb5\x74\x36\xd7\x50\x2d\x16\x7b\xab\xb9\xfb\xdb\xa9\xa4\x3c\xb8\x5d\x0a\x59\x17\xa7\x9a\xfa\x6a\xb7\x78\xc5\x6e\xd9\x5d\x8a\x1d\x73\xd0\xfc\x28\xec\xd8\x3c\x02\xc9\xab\xdd\xd3\xfc\xa7\x62\x1b\x19\xa8\xe4\xbb\x02\xf9\x36\x19\x36\x59\x7f\x44\x1d\x68\xdd\x34\xf2\xab\xa7\x6f\x93\xe1\xbf\x24\x0f\x8f\xb1\xff\x36\x19\x1e\x62\xbe\xcb\xf3\x9f\x00\x00\x00\xff\xff\xb1\x85\xf9\x6b\x53\x0d\x00\x00")

func fullsiteYmlBytes() ([]byte, error) {
	return bindataRead(
		_fullsiteYml,
		"fullSite.yml",
	)
}

func fullsiteYml() (*asset, error) {
	bytes, err := fullsiteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fullSite.yml", size: 3411, mode: os.FileMode(420), modTime: time.Unix(1536867183, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0xbd, 0x27, 0xaf, 0xb9, 0xce, 0x6e, 0xb4, 0x18, 0x59, 0x84, 0x2c, 0xdf, 0xae, 0xa1, 0x42, 0x3, 0x12, 0xb2, 0x84, 0xcc, 0x61, 0x48, 0xd, 0x36, 0x65, 0xe6, 0x4e, 0xf7, 0x7f, 0x6f, 0x84}}
	return a, nil
}

var _s3siteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5d\x6f\xe2\xbc\x12\xbe\xe7\x57\x4c\xab\x23\xd1\x1e\x11\x16\x42\xdb\x3d\x8d\x8e\xb4\x0a\x01\xfa\xb1\x85\xb2\x24\x6d\xb7\xad\xaa\x23\x93\x0c\xc1\x67\x13\x3b\xb2\x9d\xd2\xee\x6a\xff\xfb\xab\x38\x81\x24\xf0\x76\xdb\xbb\x37\x57\xc6\xf3\xf5\x78\xfc\xcc\x8c\xb1\xef\x5c\x0f\xe3\x24\x22\x0a\x47\x5c\xc4\x44\xdd\xa2\x90\x94\x33\x0b\x9a\x66\xa7\xdb\x31\x3a\xa7\x46\xe7\xb4\xd9\x18\xa0\xf4\x05\x4d\x94\x96\x38\x02\x89\x42\x09\x84\x81\xdb\x83\x79\xea\xff\x40\x05\x3e\x67\x0b\x1a\xa6\x02\x03\x58\x70\x01\x4b\x2e\x15\x65\x21\x10\x90\x8a\x28\xea\xc3\x0a\xe7\x92\x2a\x6c\x01\x61\x01\x10\x98\xf1\x54\x61\x03\xe0\xb8\x07\x83\x89\x0b\x02\x7d\x2e\x02\x48\x38\x65\xda\x4c\x71\x50\x4b\x2c\x7c\x37\xa6\x44\x90\x18\x15\x0a\x69\x35\x00\xce\xb9\x54\x18\x3c\x70\x86\xd9\x2f\x00\xef\x35\x41\x0b\x5c\x25\x28\x0b\xf5\x46\x0d\xac\xb7\x44\x1d\x81\x91\x18\x81\x2f\x32\xd0\xf8\x42\x73\x70\x76\x4c\x7e\x72\x96\x63\xc9\x90\x2c\xb5\x67\xf8\xc9\x19\x02\xb6\xc3\x36\x3c\x4b\x19\xe0\x33\x46\x3c\x89\x91\xa9\xb6\xcf\x63\x1d\xc0\x8e\x22\xbe\xc2\x60\x4a\x94\x42\xc1\x2c\x38\xf8\xb2\x67\x1c\x3e\x12\xe3\xa7\x6d\x3c\x74\x8c\x53\xa3\xfd\xf4\xab\xdb\x3a\xe9\xfd\x3e\xf8\xf2\xdf\x3d\xe3\x50\x9b\x38\x9c\x49\x25\x08\x65\xaa\x86\x2e\x4e\xa5\x82\x39\x02\x81\x67\x12\xd1\x40\x23\xd5\xe1\x33\xb8\xed\x06\xc0\x28\x8d\xa2\x01\x8f\x09\x65\x13\x12\x7f\xf8\xc0\x8b\x34\x8a\x20\xd0\x66\xf9\xc1\xf5\x69\x56\xab\x55\xfb\x9f\x3f\x91\xed\xc7\x0e\x0a\x45\x17\xd4\x27\x0a\x6d\xc1\x3e\x72\xa8\x8c\x0c\xeb\xdb\x42\xc9\x53\xe1\x23\x64\x09\x81\x03\x7b\x36\x39\x2c\xee\xd5\xbe\x73\xa1\xe2\x1a\xc6\x84\x91\x10\x05\x1c\xd8\xce\xf8\x10\xfc\x52\xd2\xfe\xdb\x33\xef\x13\xc1\x2c\xb2\x92\x16\xf1\x63\xab\xfd\xef\xfd\x06\xc0\x5d\x4e\xda\xbe\xa6\xe1\xcd\xec\xea\x23\x50\x0b\x9b\x75\x5d\xa4\x22\x6a\x00\x38\xc4\x5f\xe2\x2d\x89\x52\xf4\xbc\x9a\x97\x49\x1a\xcf\x51\x14\x5e\x16\x24\x8d\x94\x05\xbd\x4e\xa7\x0a\x50\x9b\x49\x0b\xf4\x1e\x80\x01\x27\x9d\xcd\xb2\x6b\x96\xeb\xb5\x59\xae\x52\xae\x4f\x8b\x75\x9d\x25\xde\x15\x70\xbd\x96\xd0\x6d\x81\xd9\x82\xe3\x16\x74\x3b\x2d\xe8\x1e\x43\x4c\x99\xcc\xa3\x35\xc6\x24\x49\x28\x0b\x75\xdd\xcd\x30\xa4\x9c\x8d\x49\x92\xe3\x4f\xa5\x81\x44\x2a\xa3\x6b\x15\x91\xdc\x5e\x59\x99\x17\x81\x05\x0f\x3d\xfb\x5b\xdf\xf5\xce\x46\xf7\x97\xae\x37\x5a\xdb\xac\xf0\x8f\x36\xe6\xe8\xf8\xe4\xe6\xe1\xca\x1c\x77\x6d\x67\x50\xb3\x31\xdf\x8e\xd3\xbf\x3c\xf9\x7a\x32\xbb\xb8\xb8\x9e\x7c\x1e\x6b\x25\x4c\xdf\x8b\xd3\xed\x7f\x75\xbc\xef\x83\xcf\x47\xc3\x87\xe9\x50\x2b\x91\xc4\x90\x3c\x55\xcb\xf7\x0e\x75\xdd\xb9\x34\x07\xdf\xfb\xc3\xee\xc8\xeb\xef\x1a\xbe\x8d\xb2\x7b\xe7\x5c\x9c\xdd\x5f\x38\x13\xb3\x7f\x3f\x58\x1b\x32\x2e\xde\x8d\x68\x8e\x8f\x86\xe7\x37\x33\xf3\x64\xfa\xf9\xe1\x4e\x2b\x49\xf2\x6e\xea\xbb\x67\x23\xaf\x73\x63\x77\x2f\xcc\xf3\xdb\xc6\xba\x64\xa4\xd5\x28\x49\xed\x44\x3c\x0d\x16\x82\x33\x55\xe5\xa3\x7d\xe7\x5a\x96\x16\x8d\xb4\xc8\x1a\x50\xa9\x04\x9d\xa7\x19\x55\xb4\xde\x54\xf0\x24\x2b\x25\x94\xeb\xe8\x55\x15\x47\x8f\x81\xb5\x24\xeb\x12\x71\xd6\x68\x2c\x28\xc3\xd5\xf4\x6b\x2d\x7f\x33\x4d\x4a\xf3\x54\x2a\x1e\x0f\x85\xe0\x62\x86\x32\xe1\x4c\x96\x61\x33\x6e\x6b\x49\x56\x5c\x94\x85\x63\xca\xb2\xe2\xaa\xd4\x41\xf6\xe5\x1a\x3c\x40\x0b\x8e\x3a\x47\x15\xc1\xda\x5f\x2e\x33\x6b\x46\x6b\xd9\x94\x84\x38\x25\x6a\x69\xc1\xfe\x27\xca\x02\x7c\x69\x2f\x55\x1c\xed\x6f\x34\xaf\x05\x0d\x29\xab\x21\xaa\x34\x6b\xd8\x73\x31\x42\x5f\xc1\xa3\xd9\x82\x3d\x37\x89\xa8\x82\xc7\xfd\x4f\xfb\x2d\xd8\x9b\xe1\x62\xa7\xb9\x3c\x3d\x55\x10\x64\xb7\xe8\xf6\x72\xff\x95\xed\x3c\x1f\xf9\xf6\x76\xaa\xb3\xef\xdc\xf3\xa6\x53\x2e\x94\x05\xcd\xff\x74\x9a\x3b\x22\xb7\x90\x1d\x1d\xf5\xea\xc2\xdc\xe3\x54\x70\xc5\x7d\x1e\x4d\x79\x44\xfd\x57\x0b\x96\x4a\x25\x06\x67\xd1\xeb\x46\x77\xc8\xc8\x3c\xc2\xc0\x02\x25\x52\xdc\xec\x9e\x2b\x95\x94\xef\x86\xcc\xca\x2c\xdd\x17\x6d\x6d\xc6\xb9\xba\x9e\xff\x1f\x7d\x65\x41\x99\xca\x8d\x96\x1d\x51\xb2\x75\xb7\x3a\x49\xcd\xfa\x00\x2c\xdd\x5e\xf1\x30\xa4\xac\x76\xfc\x3c\x93\x59\xda\xd3\x39\x44\x3c\x6c\xff\xeb\x57\xdd\xfa\x77\x5b\xf6\xda\x44\x8f\x11\xb2\x92\x9b\xe1\x97\x7f\x53\x81\x0b\xfa\x62\x01\xf1\x7d\x94\xb2\x7a\x15\xcc\x8f\xd2\x00\x1d\xce\x7f\x64\xa4\x87\x05\x89\x24\x6e\x1f\x4f\x37\xf8\x3e\x2e\xc9\x33\xe5\xa2\x0a\xaa\x68\xe2\x63\x54\x4b\x1e\xc8\xaa\xc4\x80\xb3\xa1\x57\xfb\x7d\x3e\xb4\x07\x95\x8d\xc2\xb5\x26\xb5\x4e\x46\x6d\x8a\x54\x14\xc7\xe4\xe5\x03\x4a\x45\x79\xfc\x51\xc9\xe1\x71\x22\x50\xca\xad\x0b\x06\xf0\x88\x08\x51\xe5\x34\x79\x83\x9b\x23\x2e\x56\x44\x04\x9b\x81\x55\x23\xd8\xb7\x14\xc5\x6b\x3e\x32\x77\x7c\x67\x61\xf3\xdc\xd6\x36\x37\x1e\x2d\x60\x9c\x55\x0d\x6e\x29\xae\x50\x6c\xb3\x55\x60\x40\x05\xfa\xca\x50\xdc\xc8\x38\x58\xde\xe1\x54\x50\x1f\x9d\x88\x64\xe7\x2a\xd7\xff\xb3\xa3\x92\x7f\xb9\xcb\xca\xeb\xa1\x76\x87\x3b\x4f\x96\x3c\x8b\x3b\xfb\x15\x1b\x57\x46\x6e\x9a\x24\x5c\xa8\xfc\xea\x2d\x90\x8c\xe6\xc5\x54\xf6\xe0\xc1\xc4\xdd\x7e\xd6\xe9\x06\xac\x5f\xa4\xc7\x3d\xcb\x9a\xe9\x77\xb1\x8b\xea\x4c\xf0\x34\x79\xa3\xff\x96\xbd\xbf\x68\x3b\x97\x9c\x32\x78\x6c\x36\x5b\xf0\x98\x17\x51\xa9\xd1\x6c\x41\x7b\xd3\x68\x36\xde\x37\xae\x0c\x28\x5c\xfc\xb1\xf6\x0a\xa4\xf5\xe2\xcd\x19\x52\x4d\xdb\xce\x68\x1f\x78\x93\x81\xed\xd9\xdf\xee\xef\xcc\x2a\xcd\x8b\x24\xc0\xde\x19\x2a\x5b\x29\x78\xdc\x99\x50\xad\x4a\x5b\x7d\x6a\x5c\xa7\x2a\x49\x73\xcc\xa5\xca\x90\x05\x7a\x94\xe4\x00\x34\x05\x3f\xee\x11\xb6\x9f\x47\x6b\x6f\xfa\xbf\x4c\x65\x74\x05\xf5\x69\x58\x26\xa8\x1e\xf6\xcd\xec\xd5\x82\x64\x0a\x15\x18\x8d\xc6\x5f\x01\x00\x00\xff\xff\xa3\x26\xe5\x2d\x8d\x0d\x00\x00")

func s3siteYmlBytes() ([]byte, error) {
	return bindataRead(
		_s3siteYml,
		"s3site.yml",
	)
}

func s3siteYml() (*asset, error) {
	bytes, err := s3siteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "s3site.yml", size: 3469, mode: os.FileMode(420), modTime: time.Unix(1535820529, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0x8c, 0x94, 0x3e, 0xa, 0xc5, 0x8, 0xb2, 0x51, 0x37, 0xb9, 0x44, 0x16, 0x33, 0xe1, 0xe9, 0x33, 0x22, 0xf8, 0x65, 0xd0, 0x6f, 0xb4, 0xd3, 0x6b, 0xc4, 0x21, 0x70, 0x57, 0x40, 0x55, 0xb8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fullSite.yml": fullsiteYml,

	"s3site.yml": s3siteYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fullSite.yml": &bintree{fullsiteYml, map[string]*bintree{}},
	"s3site.yml":   &bintree{s3siteYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
