// Code generated by go-bindata. DO NOT EDIT.
// sources:
// iaas/cloudformation/fullSite.yml
// iaas/cloudformation/s3site.yml

package iaas

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fullsiteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x61\x6f\xdb\x36\x10\xfd\xae\x5f\x71\x49\x06\xa8\x0d\x2c\xcd\x9d\xdb\x01\x21\x06\x14\x9a\xe3\xa4\xd9\xd2\xc4\xb0\x9c\x06\x88\xe1\x0f\xb4\x74\x72\x98\x51\xa4\x47\x52\x76\x92\xa2\xff\x7d\x10\x25\xcb\x94\xbd\x64\xc6\x30\xac\xf9\x14\xf2\x8e\xc7\x77\xef\xde\xa3\x1c\xdd\xc6\x63\xcc\x17\x9c\x1a\x3c\x93\x2a\xa7\xe6\x0b\x2a\xcd\xa4\x20\xe0\xff\xd4\x7d\xd7\x0d\xba\x27\x41\xf7\xc4\xf7\x4e\x51\x27\x8a\x2d\x8c\x8d\xf4\x15\x52\x83\x1a\xa8\x80\x28\xa7\xcf\x52\xc0\x48\x16\x06\xe1\x43\x0f\xee\xa5\x36\x98\xc2\xb3\x14\xe8\x0d\xa9\xa2\x39\x1a\x54\x9a\x78\x00\x9f\x6c\xe4\x4e\x0a\x2c\x57\x00\xe3\xa7\x05\x12\x88\x8d\x62\x62\x6e\x37\x5a\x57\x8c\xef\x11\x4e\xaf\x62\x10\x34\x47\x90\xd9\x3f\x5c\x05\x18\xce\x43\x78\xc0\xa5\xc6\x07\x5c\x86\x4c\xda\x82\x11\xe7\x72\x85\xe9\x90\x1a\x83\x4a\x10\x78\xf3\xf1\x20\x78\x3b\xa1\xc1\x73\x14\xdc\x75\x83\x93\x20\x9c\x7e\x7d\xd7\xf9\xb9\xf7\xed\xcd\xc7\x5f\x0e\x82\xb7\xf6\x48\x5f\x0a\x6d\x14\x65\xc2\xb4\xd0\xe4\x85\x36\x30\x43\xa0\xb0\xa4\x9c\xa5\x16\x99\xbd\xb7\x84\x17\xb6\x9a\x1b\x3c\x32\x6d\xf4\x0b\x2d\xd6\x88\xbe\x50\x5e\x60\x9d\x03\x10\x80\x51\x05\x36\x8b\x8c\x72\x8d\x35\x21\x19\x2d\xb8\x21\xad\x2d\x07\x55\xc3\x2f\x18\x09\x69\xf9\x4f\xce\x04\x02\xcb\x1c\x38\x20\x10\x53\x5d\x26\xcc\x10\x12\x3b\xb7\xd4\x03\x18\x88\x25\x53\x52\xe4\x28\xcc\x3e\xd3\x70\xd2\xcb\x61\xb8\x43\x06\xe8\x73\x86\xc2\xc4\xcc\xe0\x15\xcd\xf7\x1a\xee\x55\x3d\xd4\xc4\x9e\x04\x0f\xe0\xac\xe0\xfc\x54\xe6\x94\x89\x7d\x6b\x94\x02\xc9\x0a\xce\x21\xb5\xc7\x2a\xa1\x58\x19\xac\x56\xab\x70\xa9\x75\x8a\x4b\xe4\x72\x51\x62\x0e\x13\x99\xff\xbf\x8a\xf0\xfa\x52\xa4\xac\x4c\xb5\x63\xae\x0c\xe3\x38\x00\x0e\x06\x7f\x16\x94\x6b\x98\x1c\x8c\x30\xdb\x91\x4f\xa7\x1a\xf9\xd4\x1b\xa1\x96\x85\x4a\x4a\xb1\x1c\xed\xf7\xe7\x1d\x1d\x55\x16\xf9\xd0\x73\x65\xa0\x30\x91\x2a\x05\x26\x20\xba\x8d\x3d\x9b\xb6\x5f\x39\x28\x5b\x73\x07\x12\xdd\xc6\x84\xd4\x37\x10\xb2\xb9\x62\xcd\x56\xd5\x36\xd9\xe9\xd9\xc6\x87\x4a\x2e\x50\x19\xb6\x51\xff\x26\xa1\x2f\x45\xc6\xe6\xeb\xfd\xb2\x56\x6e\xf5\x09\x07\xbf\x49\x26\x60\xe2\xfb\x1d\x98\xf8\x9f\x1c\xd7\x67\x52\x81\xdf\x01\x4b\xa1\xbf\x29\xe4\x4f\xa7\x75\x11\x2b\xa6\xdd\xf8\xce\xd5\x63\x3a\x77\xec\xf8\x3b\x3e\x11\x18\x5f\x0c\x46\x0d\x14\x6b\xd8\xba\x90\xe3\x85\xf6\x89\x68\x38\xdc\x3e\x10\x7d\x8e\xee\xae\xaf\x2e\xa2\x2b\xcf\x03\xb8\xc5\x99\x66\x06\xfb\x65\xff\x19\x4b\xa8\xc1\x1d\x5a\x9d\xd8\x67\x2a\xe8\x1c\x55\x6b\xef\x05\x0a\x1d\xe3\x40\x83\xa0\x26\xed\x30\x3c\xec\xc0\xe4\xf0\xf8\xb0\xa6\x69\xd3\x73\x43\x12\xc0\x06\xdc\xaf\x45\xf2\x07\x9a\x1d\x5c\x71\x8f\x90\x2a\xf4\x02\x84\x2a\xe8\xd2\xdd\x76\xf4\x9a\xf2\x28\x49\x50\xeb\xbe\x14\x46\x49\x4e\x60\x58\xcc\x38\x4b\x46\x48\xd3\x3a\xbe\xe6\xc8\x4a\xa1\x50\xd4\x4a\xa9\xc1\x79\x21\x52\x7c\x3c\x95\x49\x51\xe9\x82\x95\xcb\xf0\xde\xe4\xbc\xc9\x18\x28\x25\xd5\x26\xe3\x7d\xf7\x7d\x3b\xee\xad\x21\x5c\xca\xf9\x7f\xd2\x6b\x5c\xcc\x80\xcb\x79\xf8\xc3\xd7\x76\xc3\xdf\xbe\x73\xc3\xdb\x23\x1d\x4a\xce\x92\xa7\x57\x9a\xad\x12\x5e\x6d\x79\x3d\xda\x56\xe1\xf5\x64\xab\xf3\x0d\x92\x06\x60\x6c\xa8\xc1\xf6\x56\x00\x31\x4b\x5d\x2e\xce\xa4\x3a\x47\x53\xd5\xbb\x9e\x3d\x60\x62\x74\x93\x0c\x30\xc8\x32\x4c\x0c\xa9\x1e\x6f\x67\x7f\xa8\x98\x48\xd8\x82\x72\x02\xfe\xb1\xef\x04\xa2\xa4\x7a\x81\x74\x8f\x9c\xaf\x0b\x3a\xe1\xf5\x9b\xba\xf5\xb0\x50\x25\x08\x5d\x69\xa2\x7b\x84\x90\xe6\x55\x69\xf7\xda\x81\x1f\x8f\xa7\x53\xef\xba\x30\x8b\xa2\xfa\xc8\x3b\xa6\xb6\x1e\x65\x52\x44\xaa\x9e\xa0\xfb\x6a\xf8\xbb\xee\xaf\x20\x0f\x1e\x17\x52\x35\xe4\xd4\xaa\xaa\xbd\x1b\x94\xde\xdd\x7e\x74\x3a\x76\xa3\xfd\xd1\xed\xb8\x38\x22\x25\x6a\x6f\xb7\x7f\xb4\x6d\x6e\x06\xaa\xc4\xb6\x40\x6e\x46\x97\x6d\xd4\xe7\x68\x22\x63\xda\x49\x61\xbd\xba\x19\x5d\xfe\x4b\xf0\xf0\x1a\xfa\x9b\xd1\xe5\xdf\x21\xdf\xc6\xf9\x57\x00\x00\x00\xff\xff\xf1\xf3\x74\x33\xb3\x0a\x00\x00")

func fullsiteYmlBytes() ([]byte, error) {
	return bindataRead(
		_fullsiteYml,
		"fullSite.yml",
	)
}

func fullsiteYml() (*asset, error) {
	bytes, err := fullsiteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fullSite.yml", size: 2739, mode: os.FileMode(420), modTime: time.Unix(1535211663, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0x8c, 0x9c, 0x1e, 0xcb, 0x50, 0xa9, 0x13, 0xb5, 0x86, 0xda, 0x10, 0xb9, 0x9d, 0xf2, 0x3c, 0xae, 0xce, 0x74, 0x69, 0xc5, 0x3d, 0x97, 0xc7, 0x3b, 0xe7, 0xe9, 0x70, 0x37, 0x3e, 0xc8, 0x7f}}
	return a, nil
}

var _s3siteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x6b\x6f\xe2\x3a\x13\xfe\xce\xaf\x98\x56\xaf\x44\xfb\x8a\xb0\x10\xda\xee\x69\x74\xa4\x55\xb8\xf5\xb2\x85\xb2\x24\x2d\xdb\x56\xd5\x91\x49\x86\xe0\xb3\x89\x1d\xd9\x4e\x69\x77\xb5\xff\xfd\x28\x4e\x20\x09\x9c\x5e\xbe\x1d\x3e\x39\x9e\x99\x67\x1e\x8f\xe7\x62\xec\x99\xe3\x62\x14\x87\x44\xe1\x90\x8b\x88\xa8\x5b\x14\x92\x72\x66\x41\xdd\x6c\xb5\x5b\x46\xeb\xd4\x68\x9d\xd6\x6b\x7d\x94\x9e\xa0\xb1\xd2\x92\x9e\x40\xa2\x50\x02\x61\xe0\x74\x60\x9e\x78\x3f\x50\x81\xc7\xd9\x82\x06\x89\x40\x1f\x16\x5c\xc0\x92\x4b\x45\x59\x00\x04\xa4\x22\x8a\x7a\xb0\xc2\xb9\xa4\x0a\x1b\x40\x98\x0f\x04\xa6\x3c\x51\x58\x03\x38\xee\x40\x7f\xec\x80\x40\x8f\x0b\x1f\x62\x4e\x99\x36\x53\x1c\xd4\x12\x73\xec\xda\x84\x08\x12\xa1\x42\x21\xad\x1a\xc0\x39\x97\x0a\xfd\x7b\xce\x30\xfd\x02\x70\x5f\x62\xb4\xc0\x51\x82\xb2\x40\x6f\x54\xc8\xba\x4b\xd4\x1e\x18\x89\x10\xf8\x22\x25\x8d\xcf\x34\x23\x67\x47\xe4\x27\x67\x19\x97\x94\xc9\x52\x23\xc3\x4f\xce\x10\xb0\x19\x34\xe1\x49\x4a\x1f\x9f\x30\xe4\x71\x84\x4c\x35\x3d\x1e\x69\x07\x76\x18\xf2\x15\xfa\x13\xa2\x14\x0a\x66\xc1\xc1\x97\x3d\xe3\xf0\x81\x18\x3f\x6d\xe3\xbe\x65\x9c\x1a\xcd\xc7\x5f\xed\xc6\x49\xe7\xf7\xc1\x97\x3f\xf7\x8c\x43\x6d\xd2\xe3\x4c\x2a\x41\x28\x53\x15\x76\x51\x22\x15\xcc\x11\x08\x3c\x91\x90\xfa\x9a\xa9\x76\x9f\xd2\x6d\xd6\x00\x86\x49\x18\xf6\x79\x44\x28\x1b\x93\xe8\xc3\x07\x5e\x24\x61\x08\xbe\x36\xcb\x0e\xae\x4f\xb3\x5a\xad\x9a\xff\xfd\x89\x6c\x2f\xea\xa1\x50\x74\x41\x3d\xa2\xd0\x16\xec\x23\x87\x4a\x93\x61\x7d\x5b\x28\x79\x22\x3c\x84\x34\x20\x70\x60\x4f\xc7\x87\xf9\xbd\xda\x33\x07\x4a\xd0\x30\x22\x8c\x04\x28\xe0\xc0\xee\x8d\x0e\xc1\x2b\x24\xcd\x7f\x3d\xf3\x3e\x11\xcc\x22\x2b\x69\x11\x2f\xb2\x9a\xff\xdf\xaf\x01\xcc\xb2\xa4\xed\xea\x34\xbc\x99\x5e\x7d\x84\x6a\x6e\xb3\xae\x8b\x44\x84\x35\x80\x1e\xf1\x96\x78\x4b\xc2\x04\x5d\xb7\x82\x32\x4e\xa2\x39\x8a\x1c\x65\x41\x92\x50\x59\xd0\x69\xb5\xca\x04\xb5\x99\xb4\x40\xef\x01\x18\x70\xd2\xda\x2c\xdb\x66\xb1\x5e\x9b\x65\x2a\xc5\xfa\x34\x5f\x57\xb3\xc4\xbd\x02\xae\xd7\x12\xda\x0d\x30\x1b\x70\xdc\x80\x76\xab\x01\xed\x63\x88\x28\x93\x99\xb7\xda\x88\xc4\x31\x65\x81\xae\xbb\x29\x06\x94\xb3\x11\x89\x33\xfe\x89\x34\x90\x48\x65\xb4\xad\xdc\x93\xd3\x29\x2a\xf3\xc2\xb7\xe0\xbe\x63\x7f\xeb\x3a\xee\xd9\xf0\xee\xd2\x71\x87\x6b\x9b\x15\xbe\x69\x63\x0e\x8f\x4f\x6e\xee\xaf\xcc\x51\xdb\xee\xf5\x2b\x36\xe6\xeb\x7e\xba\x97\x27\x5f\x4f\xa6\x17\x17\xd7\xe3\xcf\x23\xad\x84\xc9\x7b\x7e\xda\xdd\xaf\x3d\xf7\x7b\xff\xf3\xd1\xe0\x7e\x32\xd0\x4a\x24\x36\x24\x4f\xd4\xf2\xbd\x43\x5d\xb7\x2e\xcd\xfe\xf7\xee\xa0\x3d\x74\xbb\xbb\x86\xaf\xb3\x6c\xcf\x7a\x17\x67\x77\x17\xbd\xb1\xd9\xbd\xeb\xaf\x0d\x19\x17\xef\x7a\x34\x47\x47\x83\xf3\x9b\xa9\x79\x32\xf9\x7c\x3f\xd3\x4a\x92\xbc\x1b\xfa\xf6\xd9\xd0\x6d\xdd\xd8\xed\x0b\xf3\xfc\xb6\xb6\x2e\x19\x69\xd5\x8a\xa4\xee\x85\x3c\xf1\x17\x82\x33\x55\xce\x47\x7b\xe6\x58\x96\x16\x0d\xb5\xc8\xea\x53\xa9\x04\x9d\x27\x69\xaa\x68\xbd\x89\xe0\x71\x5a\x4a\x28\xd7\xde\xcb\x2a\x3d\x3d\x06\xd6\x92\xb4\x4b\x44\x69\xa3\xb1\xa0\x70\x57\xd1\xaf\xb4\xfc\xcd\x34\x29\xcc\x13\xa9\x78\x34\x10\x82\x8b\x29\xca\x98\x33\x59\xb8\x4d\x73\x5b\x4b\xd2\xe2\xa2\x2c\x18\x51\x96\x16\x57\xa9\x0e\xd2\x5f\xa6\xc1\x7d\xb4\xe0\xa8\x75\x54\x12\xac\xf1\x32\x99\x59\x31\x5a\xcb\x26\x24\xc0\x09\x51\x4b\x0b\xf6\x3f\x51\xe6\xe3\x73\x73\xa9\xa2\x70\x7f\xa3\x79\x2d\x68\x40\x59\x85\x51\xa9\x59\xc3\x9e\x83\x21\x7a\x0a\x1e\xcc\x06\xec\x39\x71\x48\x15\x3c\xec\x7f\xda\x6f\xc0\xde\x14\x17\x3b\xcd\xe5\xf1\xb1\xc4\x20\xbd\x45\xa7\x93\xe1\x97\xb6\xb3\x78\x64\xdb\xdb\xa1\x4e\x7f\xe7\xae\x3b\x99\x70\xa1\x2c\xa8\xff\xd1\xaa\xef\x88\x9c\x5c\x76\x74\xd4\xa9\x0a\x33\xc4\x89\xe0\x8a\x7b\x3c\x9c\xf0\x90\x7a\x2f\x16\x2c\x95\x8a\x0d\xce\xc2\x97\x8d\xee\x80\x91\x79\x88\xbe\x05\x4a\x24\xb8\xd9\x3d\x57\x2a\x2e\xde\x0d\xa9\x95\x59\xc0\xe7\x6d\x6d\xca\xb9\xba\x9e\xff\x8d\x9e\xb2\xa0\x08\xe5\x46\xcb\x0e\x29\xd9\xba\x5b\x1d\xa4\x7a\x75\x00\x16\xb0\x57\x3c\x08\x28\xab\x1c\x3f\x8b\x64\x1a\xf6\x64\x0e\x21\x0f\x9a\xff\xfb\x55\xb5\xfe\x5d\x52\x9e\x08\x5c\xd0\x67\x0b\x88\xe7\xa1\x94\xdb\x6c\x75\xbf\xee\xe2\x92\x3c\x51\x2e\xca\x3e\xf2\x9e\x3c\x42\xb5\xe4\xbe\x2c\x4b\x0c\x38\x1b\xb8\x95\xef\xf3\x81\xdd\x2f\x6d\xe4\xd0\x3a\x47\xf5\xd9\x2a\x43\xa1\xa4\x38\x22\xcf\x1f\x50\xca\xb3\xfd\x4d\xa5\x1e\x8f\x62\x81\x52\x6e\xdd\x17\x80\x4b\x44\x80\x2a\xbb\xf5\x57\x52\x6d\xc8\xc5\x8a\x08\x7f\x33\x7f\x2a\xf9\xf2\x2d\x41\xf1\x92\x4d\xc0\x1d\xec\xd4\x2d\xff\x41\xb7\x4d\x36\x88\x16\x30\xce\xca\x06\xb7\x14\x57\x28\xb6\x93\x4f\xa0\x4f\x05\x7a\xca\x50\xdc\x48\x53\xaa\xb8\xa3\x89\xa0\x1e\xf6\x42\x92\x9e\xab\x58\xff\x65\x87\x45\x3a\x65\x90\xa5\xc7\x40\xe5\x0e\x77\x5e\x20\x59\x14\x77\xf6\x4b\x36\x8e\x0c\x9d\x24\x8e\xb9\x50\xd9\xd5\x5b\x20\x19\xcd\x6a\xa3\x68\xa9\xfd\xb1\xb3\xfd\x4a\xd3\xfd\x54\x3f\x30\x8f\x3b\x96\x35\xd5\xcf\x5c\x07\xd5\x99\xe0\x49\xfc\x4a\x3b\x2d\x5a\x79\xde\x45\x2e\x39\x65\xf0\x50\xaf\x37\xe0\x21\xab\x89\x42\xa3\xde\x80\xe6\xa6\x6f\x6c\xd0\x37\x50\x06\xe4\x10\x6f\x96\x52\xce\xb4\x5a\x8b\x59\x86\x94\xc3\xb6\x33\xa9\xfb\xee\xb8\x6f\xbb\xf6\xb7\xbb\x99\x59\x4e\xf3\x3c\x08\xb0\x77\x86\xca\x56\x0a\x1e\x76\x06\x4e\xa3\xd4\x25\x1f\x6b\xd7\x89\x8a\x93\x8c\x73\xa1\x32\x60\xbe\x9e\x0c\x19\x01\x9d\x82\x1f\x47\x84\xed\xd7\xce\x1a\x4d\xff\x35\x29\x4d\x22\xbf\x3a\xdc\x8a\x00\x55\xdd\xbe\x1a\xbd\x8a\x93\x54\xa1\x44\xa3\x56\xfb\x27\x00\x00\xff\xff\x07\x22\x01\x3d\x5c\x0d\x00\x00")

func s3siteYmlBytes() ([]byte, error) {
	return bindataRead(
		_s3siteYml,
		"s3site.yml",
	)
}

func s3siteYml() (*asset, error) {
	bytes, err := s3siteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "s3site.yml", size: 3420, mode: os.FileMode(420), modTime: time.Unix(1535211796, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0x4, 0xa7, 0x80, 0x77, 0x77, 0xe0, 0x70, 0x6d, 0xa0, 0xa1, 0x36, 0x58, 0xf1, 0x89, 0xd0, 0x7a, 0xbe, 0xe3, 0x75, 0xe2, 0xe4, 0x9b, 0x85, 0xc5, 0x55, 0xb1, 0x60, 0xea, 0x6c, 0xc3, 0x97}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fullSite.yml": fullsiteYml,

	"s3site.yml": s3siteYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fullSite.yml": &bintree{fullsiteYml, map[string]*bintree{}},
	"s3site.yml":   &bintree{s3siteYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
