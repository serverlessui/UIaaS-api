// Code generated by go-bindata. DO NOT EDIT.
// sources:
// iaas/cloudformation/fullSite.yml
// iaas/cloudformation/s3site.yml

package iaas

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fullsiteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x51\x6f\xdb\x36\x10\x7e\xd7\xaf\x38\x27\x0f\x6a\x03\x4b\x73\xe7\x76\x40\x88\x01\x85\xe6\x38\x6d\x36\x34\x31\x6c\xa3\x01\x62\xf8\x81\x96\x4e\x0e\x33\x8a\xf4\x48\xca\x4e\x32\xec\xbf\x0f\x22\x65\x89\x8a\x91\xd6\xe8\x4b\xf3\x14\xf1\x8e\x77\xdf\xf7\xdd\x77\x4c\x92\xdb\xd9\x1c\x8b\x0d\xa7\x06\x2f\xa5\x2a\xa8\xf9\x8a\x4a\x33\x29\x08\x84\xbf\x0e\xde\x0d\xa2\xc1\x79\x34\x38\x0f\x83\x0b\xd4\xa9\x62\x1b\x63\x23\x23\x85\xd4\xa0\x06\x2a\x20\x29\xe8\xb3\x14\x30\x95\xa5\x41\xf8\x30\x84\x7b\xa9\x0d\x66\xf0\x2c\x05\x06\x13\xaa\x68\x81\x06\x95\x26\x01\xc0\x67\x1b\xb9\x93\x02\xab\x2f\x80\xf9\xd3\x06\x09\xcc\x8c\x62\x62\x6d\x0f\x3a\x2d\xe6\xf7\x08\x17\xd7\x33\x10\xb4\x40\x90\xf9\x77\x5a\x01\xc6\xeb\x18\x1e\x70\xab\xf1\x01\xb7\x31\x93\xb6\x60\xc2\xb9\xdc\x61\x36\xa1\xc6\xa0\x12\x04\xde\x7c\xec\x45\x6f\x17\x34\x7a\x4e\xa2\xbb\x41\x74\x1e\xc5\xcb\x7f\xdf\xf5\x7f\x1b\xfe\xf7\xe6\xe3\xef\xbd\xe8\xad\xbd\x32\x92\x42\x1b\x45\x99\x30\x1d\x34\x45\xa9\x0d\xac\x10\x28\x6c\x29\x67\x99\x45\x66\xfb\x56\xf0\xe2\x0e\xb9\xf1\x23\xd3\x46\xbf\x42\xb1\x46\xf4\x95\xf2\x12\xeb\x1c\x80\x08\x8c\x2a\xb1\xf9\xc8\x29\xd7\x58\x0b\x92\xd3\x92\x1b\xd2\x39\xf2\x50\x35\xfa\x82\x91\x90\x55\xbf\x14\x4c\x20\xb0\xdc\x83\x03\x02\x31\xd3\x55\xc2\x0a\x21\xb5\x73\xcb\x02\x80\xb1\xd8\x32\x25\x45\x81\xc2\x1c\x33\x0d\x2f\xbd\x1a\x86\x3f\x64\x80\xcb\x92\xf3\x0b\x59\x50\x26\xae\x69\x71\xf4\x70\xf3\x92\x73\xc8\xec\x35\x37\x64\x3b\xc2\xdd\x6e\x17\x6f\xb5\xce\x70\x8b\x5c\x6e\xaa\x7e\x71\x2a\x8b\x9f\x37\xcd\x1f\xb4\x2a\x56\x26\x60\x62\xfd\x7d\xcf\xfe\x6c\xb2\xc1\x48\x8a\x8c\x55\xa9\xd6\x8f\x6e\xb3\x3d\xfe\xd0\x1b\xff\x53\x52\xae\x61\xd1\x9b\x62\x7e\xe0\xf3\xbe\xf3\xe6\x32\x98\xa2\x96\xa5\x4a\x2b\x57\x9f\x1e\xf7\x13\x9c\x9e\x3a\x5d\x3e\x0c\x7d\xbf\x2a\x4c\xa5\xca\x80\x09\x48\x6e\x67\x81\x4d\x3b\xae\x1c\x54\xd4\xfc\x79\x25\xb7\x33\x42\xea\x0e\x84\xb4\x2d\xf6\x6a\x39\xda\xe4\x80\xb3\x8d\x4f\x94\xdc\xa0\x32\xac\x5d\xd3\x36\x61\x24\x45\xce\xd6\xfb\xf3\xaa\x56\x61\x17\x09\x7a\x7f\x4a\x26\x60\x11\x86\x7d\x58\x84\x9f\xbd\x51\xe7\x52\x41\xd8\x07\x2b\x61\xd8\x16\x0a\x97\xcb\xba\x88\xdd\x9c\xc3\xf8\x41\xeb\x39\x5d\x7b\xef\xc6\x5f\xf8\x44\x60\x7e\x35\x9e\x36\x50\xec\xcb\x52\x17\xf2\x96\xb6\x7b\x23\x99\x4c\x5e\x5e\x48\xbe\x24\x77\x37\xd7\x57\xc9\x75\x10\x00\xdc\xe2\x4a\x33\x83\xa3\x8a\x7f\xce\x52\x6a\xf0\x40\x56\x2f\xf6\x85\x0a\xba\x46\xd5\x39\x7b\x45\x42\xef\x95\x80\x06\x41\x2d\xda\x49\x7c\xd2\x87\xc5\xc9\xd9\x49\x2d\x53\xcb\xb9\x11\x09\xa0\x05\xf7\x47\x99\xfe\x8d\xe6\x00\xd7\x6c\x48\x88\x0b\xbd\x02\xc1\x05\x7d\xb9\xbb\xcf\xd7\x5e\xf2\x24\x4d\x51\xeb\x91\x14\x46\x49\x4e\x60\x52\xae\x38\x4b\xa7\x48\xb3\x3a\xbe\xd7\xc8\x5a\xa1\x54\xd4\x5a\xa9\xc1\x79\x25\x32\x7c\xbc\x90\x69\xe9\x7c\xc1\xaa\xcf\xf8\xde\x14\xbc\xc9\x18\x2b\x25\x55\x9b\xf1\x7e\xf0\xde\xc5\x5f\x32\x9c\x48\xce\xd2\xa7\x6f\xf0\x74\x09\xdf\x64\xbb\x67\xda\x29\xbc\x27\xea\xee\x37\x48\x1a\x80\x33\x43\x0d\x76\x8f\x22\x98\xb1\xcc\xd7\xe2\x52\xaa\x4f\x68\x5c\xbd\x9b\xd5\x03\xa6\x46\x37\xc9\x00\xe3\x3c\xc7\xd4\x10\xf7\x96\x79\xe7\x13\xc5\x44\xca\x36\x94\x13\x08\xcf\x42\x2f\x90\xa4\x6e\x21\xf5\x90\x7c\xda\x17\xf4\xc2\xfb\x27\xe6\xc5\x9e\x51\x25\x08\xdd\x69\xa2\x87\x84\x90\x66\xc9\xba\x5c\xfb\xf0\xcb\xd9\x72\x19\xdc\x94\x66\x53\xba\x3f\xce\x9e\xc7\xad\x65\x99\x14\x89\xaa\x27\xe8\x2f\x51\x78\xb8\x0c\x0e\xf2\xf8\x71\x23\x55\x23\x4e\x6d\xa8\xda\xca\x51\x65\xe5\x97\x3b\xd8\xf7\x7b\x26\x4a\xd4\xb6\xee\xfe\x63\xd5\x76\x01\xaa\x44\xf0\x7f\x00\x00\x00\xff\xff\x8f\x43\xff\xaa\x9d\x09\x00\x00")

func fullsiteYmlBytes() ([]byte, error) {
	return bindataRead(
		_fullsiteYml,
		"fullSite.yml",
	)
}

func fullsiteYml() (*asset, error) {
	bytes, err := fullsiteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fullSite.yml", size: 2461, mode: os.FileMode(420), modTime: time.Unix(1535157976, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x74, 0x20, 0x4e, 0x34, 0xdd, 0x85, 0x99, 0xad, 0x93, 0xa9, 0x82, 0x48, 0x4a, 0x5e, 0x9b, 0xcc, 0xd7, 0xfb, 0x8b, 0xc2, 0xeb, 0x97, 0x55, 0x60, 0xa1, 0x44, 0x71, 0x2a, 0xe2, 0x6c, 0x9e}}
	return a, nil
}

var _s3siteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5b\x6f\xe2\xb8\x17\x7f\xe7\x53\x9c\xf6\x85\xf6\x2f\xc2\x40\x68\x3b\xff\x5a\x2b\x8d\xc2\xad\x97\x29\x94\x21\x69\x99\xb6\xaa\x56\x26\x39\x80\x77\x12\x3b\xb2\x9d\x32\x9d\xd5\x7e\xf7\x55\x9c\x40\x92\x32\xbd\xbc\x2d\x4f\xc6\xe7\xf6\x3b\x77\xc7\x99\xb9\x1e\x46\x71\x48\x35\x0e\x85\x8c\xa8\xbe\x45\xa9\x98\xe0\x04\xea\x76\xab\xdd\xb2\x5a\xa7\x56\xeb\xb4\x5e\xeb\xa3\xf2\x25\x8b\xb5\xa1\xf4\x24\x52\x8d\x0a\x28\x07\xb7\x03\xf3\xc4\xff\x81\x1a\x7c\xc1\x17\x6c\x99\x48\x0c\x60\x21\x24\xac\x84\xd2\x8c\x2f\x81\x82\xd2\x54\x33\x1f\xd6\x38\x57\x4c\x63\x03\x28\x0f\x80\xc2\x54\x24\x1a\x6b\x00\xc7\x1d\xe8\x8f\x5d\x90\xe8\x0b\x19\x40\x2c\x18\x37\x62\x5a\x80\x5e\x61\xae\xbb\x36\xa1\x92\x46\xa8\x51\x2a\x52\x03\x38\x17\x4a\x63\x70\x2f\x38\xa6\xff\x00\xbc\xe7\x18\x09\xb8\x5a\x32\xbe\x34\x17\x15\xb0\xde\x0a\x8d\x05\x4e\x23\x04\xb1\x48\x41\xe3\x4f\x96\x81\x73\x22\xfa\x4b\xf0\x0c\x4b\x8a\x64\x65\x34\xc3\x2f\xc1\x11\xb0\xb9\x6c\xc2\x93\x52\x01\x3e\x61\x28\xe2\x08\xb9\x6e\xfa\x22\x32\x06\x9c\x30\x14\x6b\x0c\x26\x54\x6b\x94\x9c\xc0\xc1\x97\x3d\xeb\xf0\x81\x5a\xbf\x1c\xeb\xbe\x65\x9d\x5a\xcd\xc7\xbf\xdb\x8d\x93\xce\x3f\x07\x5f\xfe\xd8\xb3\x0e\x8d\x48\x4f\x70\xa5\x25\x65\x5c\x57\xd0\x45\x89\xd2\x30\x47\xa0\xf0\x44\x43\x16\x18\xa4\xc6\x7c\x0a\xb7\x59\x03\x18\x26\x61\xd8\x17\x11\x65\x7c\x4c\xa3\x0f\x3b\xbc\x48\xc2\x10\x02\x23\x96\x39\x6e\xbc\x59\xaf\xd7\xcd\xff\xde\x23\xc7\x8f\x7a\x28\x35\x5b\x30\x9f\x6a\x74\x24\xff\x88\x53\x69\x31\x6c\xb2\x85\x4a\x24\xd2\x47\x48\x03\x02\x07\xce\x74\x7c\x98\xe7\xd5\x99\xb9\x50\x52\x0d\x23\xca\xe9\x12\x25\x1c\x38\xbd\xd1\x21\xf8\x05\xa5\xf9\x5b\x9f\xf7\xa9\xe4\x84\xae\x15\xa1\x7e\x44\x9a\xff\xdb\xaf\x01\xf4\xa8\xbf\xc2\x5b\x1a\x26\xe8\x79\x57\x65\x9c\xe3\x24\x9a\xa3\xcc\x71\x2e\x68\x12\x6a\x02\x9d\x56\xab\xac\xd7\x88\x29\x02\xe6\x0e\xc0\x82\x93\xd6\xf6\xd8\xb6\x8b\xf3\x46\x2c\x63\x29\xce\xa7\xf9\xb9\x9a\x5c\xef\x0a\x84\x39\x2b\x68\x37\xc0\x6e\xc0\x71\x03\xda\xad\x06\xb4\x8f\x21\x62\x5c\x65\xd6\x6a\x23\x1a\xc7\x8c\x2f\x4d\xbb\x4c\x71\xc9\x04\x1f\xd1\x38\xc3\x9f\x28\x0b\xa9\xd2\x56\x9b\xe4\x96\xdc\x4e\xd1\x50\x17\x01\x81\xfb\x8e\xf3\xad\xeb\x7a\x67\xc3\xbb\x4b\xd7\x1b\x6e\x64\xd6\xf8\xa6\x8c\x3d\x3c\x3e\xb9\xb9\xbf\xb2\x47\x6d\xa7\xd7\xaf\xc8\xd8\xaf\xdb\xe9\x5e\x9e\x7c\x3d\x99\x5e\x5c\x5c\x8f\x3f\x8f\x0c\x13\x26\xef\xd9\x69\x77\xbf\xf6\xbc\xef\xfd\xcf\x47\x83\xfb\xc9\xc0\x30\xd1\xd8\x52\x22\xd1\xab\xf7\x9c\xba\x6e\x5d\xda\xfd\xef\xdd\x41\x7b\xe8\x75\x77\x05\x5f\x47\xd9\x9e\xf5\x2e\xce\xee\x2e\x7a\x63\xbb\x7b\xd7\xdf\x08\x72\x21\xdf\xb5\x68\x8f\x8e\x06\xe7\x37\x53\xfb\x64\xf2\xf9\x7e\x66\x98\x14\x7d\x37\xf4\xed\xb3\xa1\xd7\xba\x71\xda\x17\xf6\xf9\x6d\x6d\x53\xe9\x8a\xd4\x6a\x00\xb3\x6c\x80\xf6\x42\x91\x04\x0b\x29\xb8\x2e\xd7\xa3\x33\x73\x09\x31\xa4\xa1\x21\x91\x3e\x53\x5a\xb2\x79\x92\x96\x4a\x5e\x46\x31\xf2\x40\x5d\xe7\xed\x66\x6d\xf4\x75\xb3\x11\x9b\xde\x4d\xa4\x88\xd3\x26\x41\xb5\x01\x58\xd6\xd2\x33\x03\x7e\x43\x49\xfb\x3f\x4a\x47\x08\x81\x02\x51\x85\xbf\x32\xcc\xb7\x7b\xa2\x10\x4f\x94\x16\xd1\x40\x4a\x21\xa7\xa8\x62\xc1\x55\x61\x36\x85\x67\x28\x69\xff\x31\xbe\x1c\x31\x9e\xf6\x5f\xa9\x55\xd2\x5f\xc6\x21\x02\x24\x70\xd4\x3a\x2a\x11\x36\xfa\x32\x9a\x5d\x11\xda\xd0\x26\x74\x89\x13\xaa\x57\x04\xf6\x3f\x31\x1e\xe0\xcf\xe6\x4a\x47\xe1\xfe\x96\xf3\x5a\xb2\x25\xe3\x15\x44\xa5\x31\x0c\x7b\x2e\x86\xe8\x6b\x78\xb0\x1b\xb0\xe7\xc6\x21\xd3\xf0\xb0\xff\x69\xbf\x01\x7b\x67\xa8\x1d\xad\xab\xd1\x6d\xe6\xff\x6e\xa6\x57\x8f\x8f\x25\x30\x69\xce\xdd\x4e\x66\xaa\x74\x9d\x85\x26\xbb\x7e\x19\xf5\xf4\x77\xee\x79\x93\x89\x90\x9a\x40\xfd\xff\xad\xfa\x0e\xc9\xcd\x69\x47\x47\x9d\x2a\x31\xd3\x38\x91\x42\x0b\x5f\x84\x13\x11\x32\xff\x99\xc0\x4a\xeb\xd8\x12\x3c\x7c\xde\xf2\x0e\x38\x9d\x87\x18\x10\xd0\x32\xc1\xed\xed\xb9\xd6\x71\xf1\x38\x48\xa5\xec\x42\x7d\x3e\x04\xa7\x42\xe8\xeb\xf9\x5f\xe8\x6b\x02\x45\x54\xb7\x5c\x4e\xc8\xe8\x8b\x34\xef\x4d\x71\x01\xf5\xea\x96\xdb\x51\x6b\xc6\x70\x17\x57\xf4\x89\x09\x59\x8e\x45\x3e\x6a\x47\xa8\x57\x22\x50\x65\x8a\x05\x67\x03\xaf\xf2\xff\x7c\xe0\xf4\x4b\x17\xb9\x6a\x53\x57\x06\x44\x65\xd6\x97\x18\x47\xf4\xe7\x07\x98\xf2\x0a\x7d\x93\xa9\x27\xa2\x58\xa2\x52\x2f\x02\x0b\xe0\x51\xb9\x44\x9d\xa5\xe7\x95\x9a\x18\x0a\xb9\xa6\x32\xd8\xae\x95\x4a\x62\xbf\x25\x28\x9f\xb3\xd5\xb9\xa3\x3b\x35\x2b\x7e\xb0\x97\x22\x5b\x8d\x04\xb8\xe0\x65\x81\x5b\x86\x6b\x94\x2f\xab\x44\x62\xc0\x24\xfa\xda\xd2\xc2\x4a\x73\xaf\xb6\x12\x13\xc9\x7c\xec\x85\x34\xf5\xab\x38\xff\xe9\x84\x45\xde\x33\x95\xa5\xd5\x5c\xc9\xe1\xce\x7b\x20\x8b\xe2\xce\x7d\x49\xc6\x55\xa1\x9b\xc4\xb1\x90\x3a\x4b\x3d\x01\xc5\x59\x56\xc4\xc5\xa4\xec\x8f\xdd\x97\x6f\x26\x33\x26\xcd\x73\xef\xb8\x43\xc8\xd4\x3c\x3a\x5d\xd4\x67\x52\x24\xf1\x2b\x23\xb0\x98\xd0\x79\xe7\x5f\x0a\xc6\xe1\xa1\x5e\x6f\xc0\x43\x56\xbc\x05\x47\xbd\x01\xcd\x6d\x83\x6f\xb5\x6f\x55\x59\x90\xab\x78\xb3\xe6\x73\xa4\xd5\xa6\xc9\x2a\xa4\x1c\xb6\x9d\x05\xdc\xf7\xc6\x7d\xc7\x73\xbe\xdd\xcd\xec\x72\x99\xe7\x41\xd8\x0e\xa6\x87\x9d\x3d\xd2\x28\x4d\xb6\xc7\xda\x75\xa2\xe3\x24\xc3\x9c\x0d\xaf\x22\x86\xa6\xf4\x36\xf0\x2b\x03\xae\xbe\xfb\x52\x19\xe7\xef\xed\xe2\x0b\x41\x0b\x58\x89\x30\xd8\x7c\x09\xa4\x5f\x0c\x1a\x79\xba\x11\x0a\x2c\x03\x1e\x98\xb5\x51\x35\xf8\x41\xe8\x3b\x18\x36\xda\xcc\x17\x49\x69\x4d\x05\xd5\xe5\x58\x64\xe2\x37\x7e\xfe\x2e\x4d\x15\x23\x29\x43\x09\x46\xad\xf6\x6f\x00\x00\x00\xff\xff\x4f\x0f\x25\xa5\x53\x0d\x00\x00")

func s3siteYmlBytes() ([]byte, error) {
	return bindataRead(
		_s3siteYml,
		"s3site.yml",
	)
}

func s3siteYml() (*asset, error) {
	bytes, err := s3siteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "s3site.yml", size: 3411, mode: os.FileMode(420), modTime: time.Unix(1535157721, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0x9c, 0x39, 0xf1, 0x51, 0x82, 0xac, 0x24, 0xcc, 0x42, 0x99, 0x88, 0xbf, 0xe1, 0x1b, 0x61, 0x76, 0x5b, 0xbc, 0x14, 0xaf, 0x23, 0x47, 0x9d, 0xd9, 0xe9, 0xea, 0x3a, 0x95, 0xfb, 0x67, 0xb5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fullSite.yml": fullsiteYml,

	"s3site.yml": s3siteYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fullSite.yml": &bintree{fullsiteYml, map[string]*bintree{}},
	"s3site.yml":   &bintree{s3siteYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
