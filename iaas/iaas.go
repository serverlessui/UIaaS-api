// Code generated by go-bindata. DO NOT EDIT.
// sources:
// iaas/cloudformation/fullSite.yml
// iaas/cloudformation/s3site.yml

package iaas

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fullsiteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x51\x73\xe2\x36\x10\x7e\xf7\xaf\x58\x72\x0f\xbe\xcb\x60\x97\x2b\x77\x9d\x89\xa6\x33\x37\x2e\x21\xb9\xb4\x39\xc2\x60\x72\x99\x09\xc3\x83\xb0\xd7\x44\xa9\x2c\x51\x49\x86\x24\x9d\xfe\xf7\x8e\x65\x63\x64\x68\x52\xa6\x0f\xcd\x53\xa4\x5d\xed\x7e\xfb\xed\xf7\x01\xd1\x5d\x3c\xc5\x7c\xc5\xa9\xc1\x0b\xa9\x72\x6a\xbe\xa3\xd2\x4c\x0a\x02\xfe\x8f\xbd\x8f\xbd\xa0\x77\x16\xf4\xce\x7c\xef\x1c\x75\xa2\xd8\xca\xd8\xc8\x40\x21\x35\xa8\x81\x0a\x88\x72\xfa\x22\x05\x4c\x64\x61\x10\x3e\xf7\xe1\x41\x6a\x83\x29\xbc\x48\x81\xde\x98\x2a\x9a\xa3\x41\xa5\x89\x07\xf0\xd5\x46\xee\xa5\xc0\xf2\x04\x30\x7d\x5e\x21\x81\xd8\x28\x26\x96\xf6\xa2\xd5\x62\xfa\x80\x70\x3e\x8a\x41\xd0\x1c\x41\x66\xff\xd2\x0a\x30\x5c\x86\xf0\x88\x6b\x8d\x8f\xb8\x0e\x99\xb4\x05\x23\xce\xe5\x06\xd3\x31\x35\x06\x95\x20\xf0\xfe\x4b\x27\xf8\x30\xa3\xc1\x4b\x14\xdc\xf7\x82\xb3\x20\x9c\xff\xf9\xb1\xfb\x53\xff\xaf\xf7\x5f\x7e\xee\x04\x1f\xec\x93\x81\x14\xda\x28\xca\x84\x69\xa1\xc9\x0b\x6d\x60\x81\x40\x61\x4d\x39\x4b\x2d\x32\xdb\xb7\x84\x17\xb6\x86\x1b\x3e\x31\x6d\xf4\x2b\x23\xd6\x88\xbe\x53\x5e\x60\x9d\x03\x10\x80\x51\x05\x36\x87\x8c\x72\x8d\x35\x21\x19\x2d\xb8\x21\xad\x2b\x07\x55\xc3\x2f\x18\x09\x69\xf9\x4f\xce\x04\x02\xcb\x1c\x38\x20\x10\x53\x5d\x26\x2c\x10\x12\xbb\xb7\xd4\x03\x18\x8a\x35\x53\x52\xe4\x28\xcc\x31\xdb\x70\xd2\xcb\x65\xb8\x4b\x06\x18\x70\x86\xc2\xc4\xcc\xe0\x88\xe6\x47\x2d\x77\x54\x2f\x35\xb1\x2f\xc1\x03\xb8\x28\x38\x3f\x97\x39\x65\xe2\xd8\x1a\xa5\x40\xb2\x82\x73\x48\xed\xb3\x4a\x28\x56\x06\x9b\xcd\x26\x5c\x6b\x9d\xe2\x1a\xb9\x5c\x95\x98\xc3\x44\xe6\xff\xaf\x22\xbc\x81\x14\x29\x2b\x53\xed\x9a\x2b\xc3\x38\x0e\x80\xce\xf0\x8f\x82\x72\x0d\xb3\xce\x04\xb3\x03\xf9\x74\xab\x95\xcf\xbd\x09\x6a\x59\xa8\xa4\x14\xcb\xbb\xe3\xfe\xbc\x77\xef\x2a\x8b\x7c\xee\xbb\x32\x50\x98\x48\x95\x02\x13\x10\xdd\xc5\x9e\x4d\x3b\xae\x1c\x94\xa3\xb9\x0b\x89\xee\x62\x42\xea\x0e\x84\xec\x5a\x6c\xd9\xaa\xc6\x26\x07\x33\xdb\xf8\x58\xc9\x15\x2a\xc3\x76\xea\xdf\x25\x0c\xa4\xc8\xd8\x72\x7b\x5f\xd6\xca\xad\x3e\xa1\xf3\xab\x64\x02\x66\xbe\xdf\x85\x99\xff\xd5\x71\x7d\x26\x15\xf8\x5d\xb0\x14\xfa\xbb\x42\xfe\x7c\x5e\x17\xb1\x62\x3a\x8c\x1f\xb4\x9e\xd2\xa5\x63\xc7\xdf\xf0\x99\xc0\xf4\x6a\x38\x69\xa0\x58\xc3\xd6\x85\x1c\x2f\xb4\x5f\x44\xe3\xf1\xfe\x83\xe8\x5b\x74\x7f\x33\xba\x8a\x46\x9e\x07\x70\x87\x0b\xcd\x0c\x0e\xca\xf9\x33\x96\x50\x83\x07\xb4\x3a\xb1\x6f\x54\xd0\x25\xaa\xd6\xdd\x2b\x14\x3a\xc6\x81\x06\x41\x4d\xda\x49\x78\xd2\x85\xd9\xc9\xe9\x49\x4d\xd3\x6e\xe6\x86\x24\x80\x1d\xb8\x5f\x8a\xe4\x77\x34\x07\xb8\xe2\x3e\x21\x55\xe8\x15\x08\x55\xd0\xa5\xbb\xed\xe8\x2d\xe5\x51\x92\xa0\xd6\x03\x29\x8c\x92\x9c\xc0\xb8\x58\x70\x96\x4c\x90\xa6\x75\x7c\xcb\x91\x95\x42\xa1\xa8\x95\x52\x83\xf3\x4a\xa4\xf8\x74\x2e\x93\xa2\xd2\x05\x2b\x8f\xe1\x83\xc9\x79\x93\x31\x54\x4a\xaa\x5d\xc6\xa7\xde\xa7\x2a\xbe\x3f\xe1\x58\x72\x96\x3c\xbf\x31\x67\x95\xf0\xe6\xb4\xdb\x49\x5b\x85\xb7\x83\x56\xef\x1b\x24\x0d\xc0\xd8\x50\x83\xed\xab\x00\x62\x96\xba\x5c\x5c\x48\x75\x89\xa6\xaa\x77\xb3\x78\xc4\xc4\xe8\x26\x19\x60\x98\x65\x98\x18\x52\x7d\x96\x39\xf7\x63\xc5\x44\xc2\x56\x94\x13\xf0\x4f\x7d\x27\x10\x25\x95\x21\x75\x9f\x5c\x6e\x0b\x3a\xe1\xed\x47\xcc\x9e\xcf\xa8\x12\x84\x6e\x34\xd1\x7d\x42\x48\x63\xb2\xf6\xac\x5d\xf8\xe1\x74\x3e\xf7\x6e\x0a\xb3\x2a\xaa\xef\x3c\x47\xe3\x56\xb2\x4c\x8a\x48\xd5\x1b\x74\x4d\xe4\x1f\x9a\xa1\x82\x3c\x7c\x5a\x49\xd5\x90\x53\x0b\xaa\x96\x72\x50\x4a\x79\xdf\x83\x5d\x7b\xd1\xfe\x0e\xea\xba\x38\x22\x25\x6a\xa9\xb7\x7f\xc3\xec\x3a\x03\x55\x62\x5f\x20\xb7\x93\xeb\x36\xea\x4b\x34\x91\x31\xed\xa4\xb0\x3e\xdd\x4e\xae\xff\x23\x78\x78\x0b\xfd\xed\xe4\xfa\x9f\x90\xef\xe3\xfc\x3b\x00\x00\xff\xff\x3f\x86\xea\xc6\xc2\x09\x00\x00")

func fullsiteYmlBytes() ([]byte, error) {
	return bindataRead(
		_fullsiteYml,
		"fullSite.yml",
	)
}

func fullsiteYml() (*asset, error) {
	bytes, err := fullsiteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fullSite.yml", size: 2498, mode: os.FileMode(420), modTime: time.Unix(1535169553, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0xbc, 0x3f, 0x59, 0x8e, 0xe3, 0x5d, 0x95, 0xce, 0xbc, 0xea, 0x0, 0x4f, 0x56, 0x5c, 0x3e, 0x14, 0x34, 0x8b, 0x9d, 0xc4, 0xa9, 0x9, 0x84, 0xad, 0x70, 0xae, 0x41, 0x57, 0xa3, 0x9e, 0xf8}}
	return a, nil
}

var _s3siteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdd\x73\xda\x38\x10\x7f\xe7\xaf\xd8\xe4\x85\xe4\x06\x53\x30\x49\x7a\xd1\xdc\x4c\xc7\x7c\xe5\xa3\x85\x50\xec\x84\x26\x99\xcc\x8d\xb0\x17\xd0\xd5\x96\x3c\x92\x1c\x9a\xde\xdc\xff\x7e\x63\xd9\x60\x1b\x2e\x4d\xde\x8e\x27\x59\xbb\xfb\xdb\x9f\x56\xfb\x21\x9c\x99\xeb\x61\x14\x87\x54\xe3\x50\xc8\x88\xea\x3b\x94\x8a\x09\x4e\xa0\x6e\xb7\xda\x2d\xab\x75\x6e\xb5\xce\xeb\xb5\x3e\x2a\x5f\xb2\x58\x1b\x49\x4f\x22\xd5\xa8\x80\x72\x70\x3b\x30\x4f\xfc\xef\xa8\xc1\x17\x7c\xc1\x96\x89\xc4\x00\x16\x42\xc2\x4a\x28\xcd\xf8\x12\x28\x28\x4d\x35\xf3\x61\x8d\x73\xc5\x34\x36\x80\xf2\x00\x28\x4c\x45\xa2\xb1\x06\x70\xda\x81\xfe\xd8\x05\x89\xbe\x90\x01\xc4\x82\x71\x63\xa6\x05\xe8\x15\xe6\xd8\xb5\x09\x95\x34\x42\x8d\x52\x91\x1a\xc0\xa5\x50\x1a\x83\x07\xc1\x31\xfd\x02\xf0\x5e\x62\x24\xe0\x6a\xc9\xf8\xd2\x6c\x54\xc8\x7a\x2b\x34\x1e\x38\x8d\x10\xc4\x22\x25\x8d\x3f\x58\x46\xce\x89\xe8\x4f\xc1\x33\x2e\x29\x93\x95\x41\x86\x9f\x82\x23\x60\x73\xd9\x84\x67\xa5\x02\x7c\xc6\x50\xc4\x11\x72\xdd\xf4\x45\x64\x1c\x38\x61\x28\xd6\x18\x4c\xa8\xd6\x28\x39\x81\xa3\x4f\x07\xd6\xf1\x23\xb5\x7e\x3a\xd6\x43\xcb\x3a\xb7\x9a\x4f\x7f\xb7\x1b\x67\x9d\x7f\x8e\x3e\xfd\x71\x60\x1d\x1b\x93\x9e\xe0\x4a\x4b\xca\xb8\xae\xb0\x8b\x12\xa5\x61\x8e\x40\xe1\x99\x86\x2c\x30\x4c\x8d\xfb\x94\x6e\xb3\x06\x30\x4c\xc2\xb0\x2f\x22\xca\xf8\x98\x46\xef\x3e\xf0\x22\x09\x43\x08\x8c\x59\x76\x70\x73\x9a\xf5\x7a\xdd\xfc\xff\x4f\xe4\xf8\x51\x0f\xa5\x66\x0b\xe6\x53\x8d\x8e\xe4\xef\x39\x54\x9a\x0c\x9b\xdb\x42\x25\x12\xe9\x23\xa4\x01\x81\x23\x67\x3a\x3e\xce\xef\xd5\x99\xb9\x50\x82\x86\x11\xe5\x74\x89\x12\x8e\x9c\xde\xe8\x18\xfc\x42\xd2\xfc\xcf\x33\x1f\x52\xc9\x09\x5d\x2b\x42\xfd\x88\x34\x7f\x3b\xac\x01\xcc\xb2\xa4\xed\x9a\x34\xbc\x9d\x7e\x79\x0f\xd5\xdc\x66\x53\x17\x89\x0c\x6b\x00\x3d\xea\xaf\xf0\x8e\x86\x09\x7a\x5e\x05\x65\x9c\x44\x73\x94\x39\xca\x82\x26\xa1\x26\xd0\x69\xb5\xca\x04\x8d\x99\x22\x60\xf6\x00\x2c\x38\x6b\x6d\x97\x6d\xbb\x58\x6f\xcc\x32\x95\x62\x7d\x9e\xaf\xab\x59\xe2\x7d\x01\x61\xd6\x0a\xda\x0d\xb0\x1b\x70\xda\x80\x76\xab\x01\xed\x53\x88\x18\x57\x99\xb7\xda\x88\xc6\x31\xe3\x4b\x53\x77\x53\x5c\x32\xc1\x47\x34\xce\xf8\x27\xca\x42\xaa\xb4\xd5\x26\xb9\x27\xb7\x53\x54\xe6\x55\x40\xe0\xa1\xe3\x7c\xed\xba\xde\xc5\xf0\xfe\xda\xf5\x86\x1b\x9b\x35\xfe\xd2\xc6\x1e\x9e\x9e\xdd\x3e\x7c\xb1\x47\x6d\xa7\xd7\xaf\xd8\xd8\xaf\xfb\xe9\x5e\x9f\x7d\x3e\x9b\x5e\x5d\xdd\x8c\x3f\x8e\x8c\x12\x26\x6f\xf9\x69\x77\x3f\xf7\xbc\x6f\xfd\x8f\x27\x83\x87\xc9\xc0\x28\xd1\xd8\x52\x22\xd1\xab\xb7\x0e\x75\xd3\xba\xb6\xfb\xdf\xba\x83\xf6\xd0\xeb\xee\x1b\xbe\xce\xb2\x3d\xeb\x5d\x5d\xdc\x5f\xf5\xc6\x76\xf7\xbe\xbf\x31\xe4\x42\xbe\xe9\xd1\x1e\x9d\x0c\x2e\x6f\xa7\xf6\xd9\xe4\xe3\xc3\xcc\x28\x29\xfa\x66\xe8\xdb\x17\x43\xaf\x75\xeb\xb4\xaf\xec\xcb\xbb\xda\xa6\x64\x14\xa9\x15\x49\xdd\x0b\x45\x12\x2c\xa4\xe0\xba\x9c\x8f\xce\xcc\x25\xc4\x88\x86\x46\x44\xfa\x4c\x69\xc9\xe6\x49\x9a\x2a\x46\x6f\x22\x45\x9c\x96\x12\xaa\x8d\xf7\xb2\x4a\xcf\x8c\x81\x8d\x24\xed\x12\x51\xda\x68\x08\x14\xee\x2a\xfa\x95\x96\xbf\x9d\x26\x85\x79\xa2\xb4\x88\x06\x52\x0a\x39\x45\x15\x0b\xae\x0a\xb7\x69\x6e\x1b\x49\x5a\x5c\x8c\x2f\x47\x8c\xa7\xc5\x55\xaa\x83\xf4\x97\x69\x88\x00\x09\x9c\xb4\x4e\x4a\x82\x0d\x5e\x26\xb3\x2b\x46\x1b\xd9\x84\x2e\x71\x42\xf5\x8a\xc0\xe1\x07\xc6\x03\xfc\xd1\x5c\xe9\x28\x3c\xdc\x6a\xde\x48\xb6\x64\xbc\xc2\xa8\xd4\xac\xe1\xc0\xc5\x10\x7d\x0d\x8f\x76\x03\x0e\xdc\x38\x64\x1a\x1e\x0f\x3f\x1c\x36\xe0\x60\x8a\x8b\xbd\xe6\xf2\xf4\x54\x62\x90\xde\xa2\xdb\xc9\xf0\x4b\xdb\x59\x3c\xb2\xed\xdd\x50\xa7\xbf\x4b\xcf\x9b\x4c\x84\xd4\x04\xea\xbf\xb7\xea\x7b\x22\x37\x97\x9d\x9c\x74\xaa\xc2\x0c\x71\x22\x85\x16\xbe\x08\x27\x22\x64\xfe\x0b\x81\x95\xd6\xb1\x25\x78\xf8\xb2\xd5\x1d\x70\x3a\x0f\x31\x20\xa0\x65\x82\xdb\xdd\x4b\xad\xe3\xe2\xdd\x90\x5a\xd9\x05\x7c\xde\xd6\xa6\x42\xe8\x9b\xf9\x5f\xe8\x6b\x02\x45\x28\xb7\x5a\x4e\xc8\xe8\xce\xdd\x9a\x20\xd5\xab\x03\x70\x0f\xd6\x34\xd6\x2e\xae\xe8\x33\x13\xb2\x1c\x8b\xbc\x79\x8e\x50\xaf\x44\xa0\xca\x12\x0b\x2e\x06\x5e\xe5\xfb\x72\xe0\xf4\x4b\x1b\x39\xb4\x49\x26\x43\xa2\xd2\xbd\x4b\x8a\x23\xfa\xe3\x1d\x4a\x79\x5a\xfe\x52\xa9\x27\xa2\x58\xa2\x52\x3b\x81\x05\xf0\xa8\x5c\xa2\xce\xae\xe7\x95\x9c\x18\x0a\xb9\xa6\x32\xd8\x0e\x8a\xca\xc5\x7e\x4d\x50\xbe\x64\xa3\x6a\x0f\x3b\x75\x2b\xbe\xb3\x5d\x93\x2d\x22\x01\x2e\x78\xd9\xe0\x8e\xe1\x1a\xe5\x6e\x96\x48\x0c\x98\x44\x5f\x5b\x5a\x58\xe9\xdd\xab\xad\xc5\x44\x32\x1f\x7b\x21\x4d\xcf\x55\xac\xff\x74\xc2\xe2\xde\x33\xc8\xd2\xd4\xae\xdc\xe1\xde\x53\x21\x8b\xe2\xde\x7e\xc9\xc6\x55\xa1\x9b\xc4\xb1\x90\x3a\xbb\x7a\x02\x8a\xb3\x2c\x89\x8b\xde\xd7\x1f\xbb\xbb\xcf\x29\xd3\xf8\xcc\x4b\xf0\xb4\x43\xc8\xd4\xbc\x47\x5d\xd4\x17\x52\x24\xf1\x2b\x7d\xaf\xe8\xb9\x79\xb9\x5f\x0b\xc6\xe1\xb1\x5e\x6f\xc0\x63\x96\xbc\x85\x46\xbd\x01\xcd\x6d\x81\x6f\xd1\xb7\x50\x16\xe4\x10\xbf\xcc\xf9\x9c\x69\xb5\x68\xb2\x0c\x29\x87\x6d\x6f\xa4\xf6\xbd\x71\xdf\xf1\x9c\xaf\xf7\x33\xbb\x9c\xe6\x79\x10\xe0\xe0\x02\xb5\xa3\x35\x3c\xee\x4d\x86\x46\xa9\x9d\x3d\xd5\x6e\x12\x1d\x27\x19\xe7\x42\x65\xc0\x03\xd3\xc2\x33\x02\x26\x05\xdf\x8f\x08\xbb\xcf\x92\x0d\x9a\xf9\x0f\x51\x1a\x19\x41\x75\x0a\x15\x01\xaa\xba\x7d\x35\x7a\x15\x27\xa9\x42\x89\x46\xad\xf6\x6f\x00\x00\x00\xff\xff\x7e\x2a\x9d\x02\x05\x0d\x00\x00")

func s3siteYmlBytes() ([]byte, error) {
	return bindataRead(
		_s3siteYml,
		"s3site.yml",
	)
}

func s3siteYml() (*asset, error) {
	bytes, err := s3siteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "s3site.yml", size: 3333, mode: os.FileMode(420), modTime: time.Unix(1535163228, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0x6d, 0xf5, 0x26, 0x80, 0x34, 0xd2, 0xbd, 0x6c, 0x48, 0x56, 0xb7, 0x54, 0xe5, 0x3d, 0xab, 0x88, 0xc7, 0x8d, 0x5, 0xba, 0xf, 0x7f, 0x1a, 0x4d, 0x94, 0x5a, 0x52, 0xa3, 0x91, 0xf0, 0x52}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fullSite.yml": fullsiteYml,

	"s3site.yml": s3siteYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fullSite.yml": &bintree{fullsiteYml, map[string]*bintree{}},
	"s3site.yml":   &bintree{s3siteYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
