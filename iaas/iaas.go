// Code generated by go-bindata. DO NOT EDIT.
// sources:
// iaas/cloudformation/route53.yml
// iaas/cloudformation/s3site.yml

package iaas

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _route53Yml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xdd\x6e\xe2\x3a\x10\xbe\xcf\x53\x0c\xf4\x22\xed\x11\x41\xf4\x54\x3d\x52\xa3\x23\x55\x11\xb0\x6a\x77\x55\x8a\x00\x15\xa9\x88\x0b\x37\x99\x80\xab\x64\x9c\xb5\x1d\xb6\x74\xb5\xef\xbe\xb2\x93\x06\xa7\xa8\xda\x2e\x57\xd8\x33\x9e\xef\x67\x3e\x25\x5a\xce\x17\x98\x17\x19\xd3\xf8\x45\xc8\x9c\xe9\x07\x94\x8a\x0b\x0a\xc1\xff\x77\x70\x3e\x08\x06\x57\xc1\xe0\xca\xf7\x46\xa8\x62\xc9\x0b\x6d\x2b\x43\x89\x4c\xa3\x02\x46\x10\xe5\xec\x55\x10\xcc\x44\xa9\x11\x2e\x2f\x60\x2b\x94\xc6\x04\x5e\x05\xa1\x37\x65\x92\xe5\xa8\x51\xaa\xd0\x03\xb8\xb1\x95\x47\x41\x68\x4e\x00\x8b\x7d\x81\x21\xcc\xb5\xe4\xb4\xb1\x17\x2d\x88\xc5\x16\x61\x34\x99\x03\xb1\x1c\x41\xa4\x7f\x80\x02\xec\x6f\xfa\xf0\x8c\x3b\x85\xcf\xb8\xeb\x73\x61\x07\x46\x59\x26\x7e\x60\x32\x65\x5a\xa3\xa4\x10\x4e\xaf\x3b\xc1\xd9\x8a\x05\xaf\x51\xf0\x38\x08\xae\x82\xfe\xfa\xe7\x79\xef\xbf\x8b\x5f\xa7\xd7\xff\x77\x82\x33\xfb\x64\x28\x48\x69\xc9\x38\xe9\x16\x9b\xbc\x54\x1a\x9e\x10\x18\xec\x58\xc6\x13\xcb\xcc\xe2\x1a\x7a\xfd\x96\xb8\xf1\x0b\x57\x5a\x7d\x20\xb1\x66\xf4\xc0\xb2\x12\xeb\x1e\x80\x00\xb4\x2c\xb1\x39\xa4\x2c\x53\x58\x1b\x92\xb2\x32\xd3\x61\xeb\xca\x61\xd5\xf8\x0b\x5a\x40\x62\xfe\xe4\x9c\x10\x78\xea\xd0\x01\x42\x4c\x94\x69\x78\x42\x88\xed\xde\x12\x0f\x60\x4c\x3b\x2e\x05\xe5\x48\xfa\xef\xa8\x16\x52\x24\xcd\x81\x04\x35\xe7\x86\x6c\xfb\xd2\xa1\xeb\x60\x9a\x8d\xba\x49\xf1\x86\x82\x12\x6e\xda\x2c\x54\x95\x2f\x27\x30\xd0\x19\x7f\x2f\x59\xa6\x60\xd5\x99\x61\x7a\xe4\x76\xaf\x72\x68\xed\xcd\x50\x89\x52\xc6\x86\xf0\xc9\xe7\x7e\xde\xc9\x49\x95\xa8\xcb\x0b\xd7\x35\x89\xb1\x90\x09\x70\x82\x68\x39\x37\x3d\x8b\x2d\x57\xc0\x15\xc4\xa5\x94\x48\x3a\xdb\x43\x2c\x72\x23\x05\x13\x10\xa5\x06\xc5\x29\x46\xd0\x5b\x84\x87\xf9\x7c\x84\x3b\xcc\x44\x61\x95\xba\x29\x65\x99\x44\x96\xec\x01\x2d\xeb\x4f\x53\x04\x93\x37\x77\x4d\xd1\x72\x1e\x86\x35\xeb\x30\x3c\xd0\x7e\x8b\x70\x65\x65\x78\xe4\xa3\xad\x4f\xa5\x28\x50\x6a\x7e\xd8\xea\xa1\x61\x28\x28\xe5\x9b\xb7\x7b\x33\xcb\x6a\x0c\xa1\xf3\x55\x70\x82\x95\xef\xf7\x60\xe5\xdf\x38\x92\x52\x21\xc1\xef\x81\x5d\x8b\x7f\x18\xe4\xaf\xd7\xf5\x90\x09\xcb\xcd\xfe\xde\xd7\x8f\xa0\x17\x6c\xe3\xc4\xec\x1b\xee\x43\x58\xdc\x8e\x67\x0d\x15\x1b\xc4\x7a\x90\x93\xa4\xf6\x8b\x68\x3a\x7d\xff\x20\xba\x8b\x1e\xef\x27\xb7\xd1\xc4\x03\x58\xe2\x93\xe2\x1a\x87\x46\x7e\xca\x63\xa6\xf1\xc8\x55\xa7\x76\xc7\x88\x6d\x50\xb6\xee\x3e\x70\x70\x24\x72\xc6\xa9\x92\xda\x10\xa8\x3d\xeb\xf6\xbb\x3d\x58\x75\xff\xe9\xd6\x2e\x1d\x24\xaf\xd7\xde\x7d\xa9\x8b\xb2\xfa\x5c\x38\xe4\x2c\x16\x17\x14\x49\xaa\x10\x5c\xf1\xfe\xb1\x8a\xca\xcd\xf1\x4b\x21\xa4\x0e\xdb\xbe\xd7\x1c\x02\xc3\xe1\xbd\x77\x3d\x17\x33\x92\x54\xef\xac\xfd\xa9\x3f\xa0\x00\x93\xe4\xfd\x0e\x00\x00\xff\xff\xb8\x21\xff\xc0\x2f\x06\x00\x00")

func route53YmlBytes() ([]byte, error) {
	return bindataRead(
		_route53Yml,
		"route53.yml",
	)
}

func route53Yml() (*asset, error) {
	bytes, err := route53YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "route53.yml", size: 1583, mode: os.FileMode(420), modTime: time.Unix(1532729107, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x19, 0x93, 0x64, 0x2e, 0x4a, 0x74, 0x1f, 0xd7, 0xe6, 0x3e, 0xd7, 0xa2, 0x89, 0xd7, 0xe4, 0xaa, 0x3c, 0xe9, 0xd6, 0x6b, 0xc4, 0x81, 0x1b, 0xcb, 0x64, 0xf, 0x2, 0x3, 0xe1, 0xbb, 0x18, 0x66}}
	return a, nil
}

var _s3siteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5b\x6f\xdb\x3a\x12\x7e\xf7\xaf\x98\xe4\xc5\x6d\x61\xb9\xbe\x24\xe9\x96\x58\xe0\x40\x96\x2f\x49\x4f\xed\xb8\x96\xda\x9c\x26\x08\x16\xb4\x34\xb6\xb9\x47\x22\x05\x92\xaa\xdb\x2e\xf6\xbf\x2f\x44\xca\xba\xc4\xb9\xbd\xad\x9f\x64\xce\xed\x9b\x0b\x67\x86\xee\x8d\x1f\x60\x92\xc6\x54\xe3\x54\xc8\x84\xea\x6f\x28\x15\x13\x9c\x40\x7b\xd0\xeb\xf7\x9c\xde\x47\xa7\xf7\xb1\xdd\x1a\xa3\x0a\x25\x4b\xb5\xa1\x78\x12\xa9\x46\x05\x94\x83\x3f\x84\x75\x16\xfe\x8d\x1a\x42\xc1\x37\x6c\x9b\x49\x8c\x60\x23\x24\xec\x84\xd2\x8c\x6f\x81\x82\xd2\x54\xb3\x10\xf6\xb8\x56\x4c\x63\x07\x28\x8f\x80\xc2\x4a\x64\x1a\x5b\x00\xe7\x43\x18\x2f\x7c\x90\x18\x0a\x19\x41\x2a\x18\x37\x62\x5a\x80\xde\x61\xa1\xbb\xb5\xa4\x92\x26\xa8\x51\x2a\xd2\x02\xb8\x14\x4a\x63\x74\x2b\x38\xe6\xff\x00\x82\x5f\x29\x12\xf0\xb5\x64\x7c\x6b\x0e\x1a\x60\x83\x1d\x1a\x0b\x9c\x26\x08\x62\x93\x83\xc6\x9f\xcc\x82\x73\x13\xfa\x5b\x70\x8b\x25\x47\xb2\x33\x9a\xe1\xb7\xe0\x08\xd8\xdd\x76\xe1\x87\x52\x11\xfe\xc0\x58\xa4\x09\x72\xdd\x0d\x45\x62\x0c\xb8\x71\x2c\xf6\x18\x2d\xa9\xd6\x28\x39\x81\x37\x7f\x9c\x38\x6f\xef\xa8\xf3\xdb\x75\x6e\x7b\xce\x47\xa7\x7b\xff\x9f\x7e\xe7\x62\xf8\xdf\x37\x7f\xfc\xf3\xc4\x79\x6b\x44\x3c\xc1\x95\x96\x94\x71\xdd\x40\x97\x64\x4a\xc3\x1a\x81\xc2\x0f\x1a\xb3\xc8\x20\x35\xe6\x73\xb8\xdd\x16\xc0\x34\x8b\xe3\xb1\x48\x28\xe3\x0b\x9a\xbc\xda\xe1\x4d\x16\xc7\x10\x19\x31\xeb\xb8\xf1\x66\xbf\xdf\x77\xff\xff\x1e\xb9\x61\xe2\xa1\xd4\x6c\xc3\x42\xaa\xd1\x95\xfc\x35\x4e\xe5\xc5\x70\xc8\x16\x2a\x91\xc9\x10\x21\x0f\x08\xbc\x71\x57\x8b\xb7\x45\x5e\xdd\x1b\x1f\x6a\xaa\x61\x4e\x39\xdd\xa2\x84\x37\xae\x37\x7f\x0b\x61\x45\xe9\x3e\xea\xf3\x29\x95\x9c\xd0\xbd\x22\x34\x4c\x48\xf7\xdd\x69\x0b\xc0\xa3\xe1\x0e\xbf\xd1\x38\xc3\x20\xf8\x5c\xc7\xb9\xc8\x92\x35\xca\x02\xe7\x86\x66\xb1\x26\x30\xec\xf5\xea\x7a\x8d\x98\x22\x60\xce\x00\x1c\xb8\xe8\x95\x9f\xfd\x41\xf5\x7d\x10\xb3\x2c\xd5\xf7\xc7\xe2\xbb\x99\xdc\xe0\x33\x08\xf3\xad\xa0\xdf\x81\x41\x07\xce\x3b\xd0\xef\x75\xa0\x7f\x0e\x09\xe3\xca\x5a\x6b\xcd\x69\x9a\x32\xbe\x35\xd7\x65\x85\x5b\x26\xf8\x9c\xa6\x16\x7f\xa6\x1c\xa4\x4a\x3b\x7d\x52\x58\xf2\x87\xd5\x85\xba\x8a\x08\xdc\x0e\xdd\x2f\x23\x3f\x98\x4d\xbf\x7f\xf2\x83\xe9\x41\x66\x8f\xcf\xca\x0c\xa6\xe7\x17\x5f\x6f\x3f\x0f\xe6\x7d\xd7\x1b\x37\x64\x06\x4f\xdb\x19\x7d\xba\xf8\xf3\x62\x75\x75\x75\xbd\xf8\x30\x37\x4c\x98\xbd\x64\xa7\x3f\xfa\xd3\x0b\xfe\x1a\x7f\x38\x9b\xdc\x2e\x27\x86\x89\xa6\x8e\x12\x99\xde\xbd\xe4\xd4\x75\xef\xd3\x60\xfc\xd7\x68\xd2\x9f\x06\xa3\x63\xc1\xa7\x51\xf6\x6f\xbc\xab\xd9\xf7\x2b\x6f\x31\x18\x7d\x1f\x1f\x04\xb9\x90\x2f\x5a\x1c\xcc\xcf\x26\x97\x5f\x57\x83\x8b\xe5\x87\xdb\x1b\xc3\xa4\xe8\x8b\xa1\xef\xcf\xa6\x41\xef\xab\xdb\xbf\x1a\x5c\x7e\x6b\x1d\x2a\xdd\xa4\xf1\xc6\xf6\xcf\x91\xe9\x88\xf5\x52\x74\x6f\x7c\x42\xfc\x21\x21\x96\x64\x28\x4b\x29\xd2\xbc\xdc\xad\x68\xfe\xb3\x44\xd3\x43\xe0\x64\x85\x1b\x68\x37\x3b\x4b\xbb\xe0\x73\xc3\x10\x95\xf2\x04\xd7\x52\xc4\x04\x96\xd9\x3a\x66\xe1\x0a\x69\x54\xd0\x0b\x18\x5e\xd1\xed\xa9\x29\xcb\x82\x06\x70\xc5\x23\xfc\x39\x16\x61\x96\x37\x17\x02\x2c\xff\xdb\xdd\xe9\x24\x2e\x39\x26\x52\x0a\x59\x71\x9c\xf5\xce\x2c\xfd\xa1\x87\x4b\x11\xb3\xf0\xd7\x33\x7e\x5a\x86\x67\xbd\x3d\x78\xda\x50\x7c\x70\xd4\xca\x97\x48\x4a\x80\xbe\xa6\x1a\x9b\x47\x0e\xf8\x2c\xaa\xc7\x62\x2a\xe4\x0c\xb5\xd5\x77\xbd\xfe\x37\x86\x5a\x95\xcc\x00\x93\xcd\x06\x43\x4d\x6c\x1f\xa8\x9d\x2f\x25\xe3\x21\x4b\x69\x4c\xa0\xfd\xae\x5d\x23\xb8\xa1\xbd\xdc\x6a\x48\x66\x07\x85\x35\xf2\xa1\x0c\x08\x9c\x7c\x12\x8c\xc3\x5d\xbb\xdd\x81\xbb\xf6\xa1\x5b\xa9\x21\x21\xa4\xdd\x79\xd4\xd7\x0e\xbc\x7f\x77\x7f\x5f\x0b\xae\x17\x8b\x2c\xda\x48\xc1\x8f\x4b\xc8\x90\xa6\x86\x44\xc6\x4c\x69\xc9\xd6\x59\x8e\xab\x68\x42\x29\xf2\x48\x5d\x17\xb9\x76\x9a\xc9\x7a\x22\x0b\x75\x2d\xb6\x60\xaa\x98\x7a\x22\xb1\x15\x50\x21\x6a\xf0\x37\x56\x81\x72\xcb\xa8\xc4\x33\xa5\x45\x62\x8a\x69\x85\x2a\x15\x5c\x55\x66\x73\x78\x86\x92\x77\x6f\xc6\xb7\x73\xc6\xf3\xee\x5d\x6b\xb4\x65\x21\x7a\x22\x42\x53\x84\xcd\x70\x1b\x7d\x96\x36\x68\x08\x1d\x68\x4b\xba\xc5\x25\xd5\x3b\x02\xa7\xef\xab\x22\x3f\x2d\x39\xaf\x25\xdb\x32\xde\x40\x54\x1b\xe2\x70\xe2\x63\x8c\xa1\x86\xbb\x41\x07\x4e\xfc\x34\x66\x1a\xee\x4e\xdf\x9f\x76\xe0\x64\x86\xda\xd5\xba\x19\xdd\x6e\xf1\xef\xeb\xea\xf3\xfd\x7d\x0d\x4c\xde\x31\xfc\xa1\x35\x55\x3b\xb6\xa1\xb1\xc7\x0f\xa3\x9e\xff\x2e\x83\x60\xb9\x14\x52\x13\x68\xff\xa3\xd7\x3e\x22\xf9\x05\xed\xec\x6c\xd8\x24\x5a\x8d\x4b\x29\xb4\x08\x45\x5c\xdc\x4f\xd8\x69\x9d\x3a\x82\xc7\xbf\xaa\x1b\xce\xe9\x3a\xc6\x88\x80\x96\x19\x96\xa7\x97\x5a\xa7\xd5\x6a\x99\x4b\x0d\x2a\xf5\xc5\x08\x5d\x09\x51\x54\xff\xa3\xad\xc3\x8d\x19\x7d\x90\xe6\xe7\x3a\x59\xa9\xd6\x0c\xf1\x11\xee\xe8\x0f\x26\x64\x3d\x16\xc5\xa0\x9e\xa3\xde\x89\x48\xd5\x29\x0e\xcc\x26\x41\xe3\xff\xe5\xc4\x1d\xd7\x0e\x0a\xd5\xa6\xae\x0c\x88\xc6\xa6\x50\x63\x9c\xd3\x9f\xaf\x60\x2a\x2a\xf4\x59\x26\x4f\x24\xa9\x44\xa5\x1e\x04\x16\x20\xa0\x72\x8b\xda\xa6\xe7\x89\x9a\x98\x0a\xb9\xa7\x32\x2a\x97\x92\x46\x62\xbf\x64\x28\x7f\xd9\xc5\xeb\x48\x77\x6e\x56\xfc\xcd\x1e\x8a\x94\x1a\x09\x70\xc1\xeb\x02\xdf\x18\xee\x51\x3e\xac\x12\x89\x11\x93\x18\x6a\x47\x0b\x27\xcf\x7d\xd5\x2e\x97\x92\x85\xe8\xc5\x34\xf7\xab\xfa\xfe\x97\x1b\x57\x79\xb7\x2a\x6b\x8b\x5d\x23\x87\x47\xdb\xa4\x8d\xe2\xd1\x79\x4d\xc6\x57\xb1\x9f\xa5\xa9\x90\xda\xa6\x9e\x80\xe2\xcc\x16\x71\xd5\x29\xc7\x0b\xff\xe1\xc6\x6d\xda\xa4\x79\x2c\x9c\x0f\x09\x59\x99\x27\x8b\x8f\x7a\x26\x45\x96\x3e\xd1\x02\xab\xf9\x5e\xdc\xfc\x5a\x07\xb7\xc5\x5b\x71\xb4\x3b\xd0\x2d\x2f\x78\xa9\xbd\x54\xe5\xc0\xcb\xd3\xbb\x44\xda\xbc\x34\xb6\x42\xea\x61\x3b\x5a\xdf\xc6\xc1\x62\xec\x06\xee\x97\xef\x37\x83\x7a\x99\x17\x41\x28\x1b\xd3\xdd\xd1\x1c\xe9\xd4\x3a\xdb\x7d\xeb\x3a\xd3\x69\x66\x31\xd7\x36\x0e\xa3\xd1\x94\xde\x33\x23\xb9\xb1\xe7\x2e\x8a\xd7\x5a\xf5\xbe\xd4\x02\x76\x22\x8e\x0e\xef\xc8\xfc\xbd\xa9\x91\xe7\x13\xa1\xc2\x32\xe1\x91\x19\x1b\x4d\x83\xaf\x84\x7e\x84\xe1\xa0\xcd\xbc\x67\x6b\x63\x2a\x6a\x0e\xc7\x2a\x13\x8f\xf8\xf9\x58\x9a\x1a\x46\x72\x86\x1a\x8c\x56\xeb\x7f\x01\x00\x00\xff\xff\xd0\x9c\x42\x59\x91\x0f\x00\x00")

func s3siteYmlBytes() ([]byte, error) {
	return bindataRead(
		_s3siteYml,
		"s3site.yml",
	)
}

func s3siteYml() (*asset, error) {
	bytes, err := s3siteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "s3site.yml", size: 3985, mode: os.FileMode(420), modTime: time.Unix(1532748634, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x26, 0xd6, 0xa0, 0x21, 0xe2, 0x7e, 0xaf, 0xe, 0x5e, 0xcb, 0xce, 0xe5, 0x0, 0x28, 0xa5, 0x7c, 0x43, 0x16, 0x32, 0x3e, 0x9b, 0x70, 0x50, 0x90, 0xde, 0xb, 0x3c, 0xb8, 0x3f, 0xf9, 0xa1, 0xa3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"route53.yml": route53Yml,

	"s3site.yml": s3siteYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"route53.yml": &bintree{route53Yml, map[string]*bintree{}},
	"s3site.yml":  &bintree{s3siteYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
