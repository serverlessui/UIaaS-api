// Code generated by go-bindata. DO NOT EDIT.
// sources:
// iaas/cloudformation/fullSite.yml
// iaas/cloudformation/s3site.yml

package iaas

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fullsiteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x51\x6f\xdb\x36\x10\x7e\xd7\xaf\x38\x27\x0f\x6a\x03\x4b\x73\xe7\x76\x40\x88\x01\x85\xe6\x38\x6d\x36\x34\x31\x6c\xa3\x01\x62\xf8\x81\xa6\x4e\x0e\x33\x8a\xf4\x48\xca\x4e\x32\xec\xbf\x0f\x22\x65\x99\x8a\x91\x2e\x4f\xf3\x93\xc5\x3b\xde\x7d\xf7\x7d\xdf\xc9\xce\x6e\x67\x73\x2c\x37\x82\x5a\xbc\x54\xba\xa4\xf6\x3b\x6a\xc3\x95\x24\x10\xff\x3c\xf8\x30\x48\x06\xe7\xc9\xe0\x3c\x8e\x2e\xd0\x30\xcd\x37\xd6\x45\x46\x1a\xa9\x45\x03\x54\x42\x56\xd2\x67\x25\x61\xaa\x2a\x8b\xf0\x69\x08\xf7\xca\x58\xcc\xe1\x59\x49\x8c\x26\x54\xd3\x12\x2d\x6a\x43\x22\x80\xaf\x2e\x72\xa7\x24\xd6\x4f\x00\xf3\xa7\x0d\x12\x98\x59\xcd\xe5\xda\x1d\x74\x5a\xcc\xef\x11\x2e\xae\x67\x20\x69\x89\xa0\x8a\xff\x68\x05\x98\xae\x53\x78\xc0\xad\xc1\x07\xdc\xa6\x5c\xb9\x82\x99\x10\x6a\x87\xf9\x84\x5a\x8b\x5a\x12\x78\xf7\xb9\x97\xbc\x5f\xd0\xe4\x39\x4b\xee\x06\xc9\x79\x92\x2e\xff\xfe\xd0\xff\x65\xf8\xcf\xbb\xcf\xbf\xf6\x92\xf7\xee\xca\x48\x49\x63\x35\xe5\xd2\x76\xd0\x94\x95\xb1\xb0\x42\xa0\xb0\xa5\x82\xe7\x0e\x99\xeb\x5b\xc3\x4b\x3b\xc3\x8d\x1f\xb9\xb1\xe6\x95\x11\x1b\x44\xdf\xa9\xa8\xb0\xc9\x01\x48\xc0\xea\x0a\xdb\x87\x82\x0a\x83\x0d\x21\x05\xad\x84\x25\x9d\xa3\x00\x55\xcb\x2f\x58\x05\x79\xfd\xa5\xe4\x12\x81\x17\x01\x1c\x90\x88\xb9\xa9\x13\x56\x08\xcc\xe9\x96\x47\x00\x63\xb9\xe5\x5a\xc9\x12\xa5\x7d\x8b\x1a\x41\x7a\x2d\x46\x28\x32\xc0\x65\x25\xc4\x85\x2a\x29\x97\xd7\xb4\x7c\xb3\xb8\x45\x25\x04\xe4\xee\x9a\x17\xd9\x49\xb8\xdb\xed\xd2\xad\x31\x39\x6e\x51\xa8\x4d\xdd\x2f\x65\xaa\xfc\x7f\xd5\x8c\x46\x4a\xe6\xbc\x4e\x75\x12\x79\xb3\x07\xee\x85\xde\xf8\xaf\x8a\x0a\x03\x8b\xde\x14\x8b\x23\xe9\xfb\x5e\xae\x65\x34\x45\xa3\x2a\xcd\x6a\xa1\x4f\xdf\xf6\x89\x4e\x4f\xbd\xbd\x3f\x0d\x43\x09\x35\x32\xa5\x73\xe0\x12\xb2\xdb\x59\xe4\xd2\xde\x56\x0e\xea\xd1\x42\x41\xb2\xdb\x19\x21\x4d\x07\x42\x0e\x2d\xf6\x6c\xf9\xb1\xc9\xd1\xcc\x2e\x3e\xd1\x6a\x83\xda\xf2\x83\x73\x0f\x09\x23\x25\x0b\xbe\xde\x9f\xd7\xb5\x4a\xe7\x2d\xe8\xfd\xae\xb8\x84\x45\x1c\xf7\x61\x11\x7f\x0d\x36\xb6\x50\x1a\xe2\x3e\x38\x0a\xe3\x43\xa1\x78\xb9\x6c\x8a\x38\x33\x1d\xc7\x8f\x5a\xcf\xe9\x3a\x58\xa5\x3f\xf0\x89\xc0\xfc\x6a\x3c\x6d\xa1\xb8\x65\x6b\x0a\x05\x3e\xee\xde\xc8\x26\x93\x97\x17\xb2\x6f\xd9\xdd\xcd\xf5\x55\x76\x1d\x45\x00\xb7\xb8\x32\xdc\xe2\xa8\x9e\xbf\xe0\x8c\x5a\x3c\xa2\x35\x88\x7d\xa3\x92\xae\x51\x77\xce\x5e\xa1\x30\x58\x1c\x68\x11\x34\xa4\x9d\xa4\x27\x7d\x58\x9c\x9c\x9d\x34\x34\x1d\x66\x6e\x49\x02\x38\x80\xfb\xad\x62\x7f\xa2\x3d\xc2\x35\x1b\x12\xe2\x43\xaf\x40\xf0\xc1\x90\xee\xee\x46\xef\x29\xcf\x18\x43\x63\x46\x4a\x5a\xad\x04\x81\x49\xb5\x12\x9c\x4d\x91\xe6\x4d\x7c\xcf\x91\xb3\x42\xa5\xa9\xb3\x52\x8b\xf3\x4a\xe6\xf8\x78\xa1\x58\xe5\x7d\xc1\xeb\xc7\xf4\xde\x96\xa2\xcd\x18\x6b\xad\xf4\x21\xe3\xe3\xe0\xa3\x8f\xbf\x9c\x70\xa2\x04\x67\x4f\x3f\x98\xd3\x27\xfc\x70\xda\xfd\xa4\x9d\xc2\xfb\x41\xfd\xfd\x16\x49\x0b\x70\x66\xa9\xc5\xee\x51\x02\x33\x9e\x87\x5c\x5c\x2a\xfd\x05\xad\xaf\x77\xb3\x7a\x40\x66\x4d\x9b\x0c\x30\x2e\x0a\x64\x96\xf8\x77\x59\x70\x3e\xd1\x5c\x32\xbe\xa1\x82\x40\x7c\x16\x07\x81\x8c\xf9\x85\x34\x43\xf2\x65\x5f\x30\x08\xef\x5f\x31\x2f\xf6\x8c\x6a\x49\xe8\xce\x10\x33\x24\x84\xb4\x4b\xd6\x9d\xb5\x0f\x3f\x9d\x2d\x97\xd1\x4d\x65\x37\x95\xff\xbd\x0a\x3c\xee\x2c\xcb\x95\xcc\x74\xa3\x60\xb8\x44\xf1\xf1\x32\x78\xc8\xe3\xc7\x8d\xd2\x2d\x39\x8d\xa1\x1a\x2b\x27\xb5\x95\x5f\xee\x60\x3f\xec\x99\x69\xd9\xd8\xba\xfb\x5f\xe3\xd0\x05\xa8\x96\xd1\xbf\x01\x00\x00\xff\xff\x4d\xfb\x39\x89\xb0\x08\x00\x00")

func fullsiteYmlBytes() ([]byte, error) {
	return bindataRead(
		_fullsiteYml,
		"fullSite.yml",
	)
}

func fullsiteYml() (*asset, error) {
	bytes, err := fullsiteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fullSite.yml", size: 2224, mode: os.FileMode(420), modTime: time.Unix(1535158953, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0xf8, 0xb, 0x4f, 0x12, 0x0, 0x90, 0x64, 0x7e, 0x2f, 0xe1, 0xd8, 0x43, 0x6f, 0xb8, 0x35, 0xdb, 0xb4, 0xaa, 0x7d, 0x15, 0xa0, 0xf6, 0xa7, 0xee, 0x3d, 0x56, 0x81, 0xcc, 0xdc, 0x2d, 0x3d}}
	return a, nil
}

var _s3siteYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5b\x6f\xe2\xb8\x17\x7f\xe7\x53\x9c\xf6\x85\xf6\x2f\xc2\x40\x68\x3b\xff\x5a\x2b\x8d\xc2\xad\x97\x29\x94\x21\x69\x99\xb6\xaa\x56\x26\x39\x80\x77\x12\x3b\xb2\x9d\x32\x9d\xd5\x7e\xf7\x55\x9c\x40\x92\x32\xbd\xbc\x2d\x4f\xc6\xe7\xf6\x3b\x77\xc7\x99\xb9\x1e\x46\x71\x48\x35\x0e\x85\x8c\xa8\xbe\x45\xa9\x98\xe0\x04\xea\x76\xab\xdd\xb2\x5a\xa7\x56\xeb\xb4\x5e\xeb\xa3\xf2\x25\x8b\xb5\xa1\xf4\x24\x52\x8d\x0a\x28\x07\xb7\x03\xf3\xc4\xff\x81\x1a\x7c\xc1\x17\x6c\x99\x48\x0c\x60\x21\x24\xac\x84\xd2\x8c\x2f\x81\x82\xd2\x54\x33\x1f\xd6\x38\x57\x4c\x63\x03\x28\x0f\x80\xc2\x54\x24\x1a\x6b\x00\xc7\x1d\xe8\x8f\x5d\x90\xe8\x0b\x19\x40\x2c\x18\x37\x62\x5a\x80\x5e\x61\xae\xbb\x36\xa1\x92\x46\xa8\x51\x2a\x52\x03\x38\x17\x4a\x63\x70\x2f\x38\xa6\xff\x00\xbc\xe7\x18\x09\xb8\x5a\x32\xbe\x34\x17\x15\xb0\xde\x0a\x8d\x05\x4e\x23\x04\xb1\x48\x41\xe3\x4f\x96\x81\x73\x22\xfa\x4b\xf0\x0c\x4b\x8a\x64\x65\x34\xc3\x2f\xc1\x11\xb0\xb9\x6c\xc2\x93\x52\x01\x3e\x61\x28\xe2\x08\xb9\x6e\xfa\x22\x32\x06\x9c\x30\x14\x6b\x0c\x26\x54\x6b\x94\x9c\xc0\xc1\x97\x3d\xeb\xf0\x81\x5a\xbf\x1c\xeb\xbe\x65\x9d\x5a\xcd\xc7\xbf\xdb\x8d\x93\xce\x3f\x07\x5f\xfe\xd8\xb3\x0e\x8d\x48\x4f\x70\xa5\x25\x65\x5c\x57\xd0\x45\x89\xd2\x30\x47\xa0\xf0\x44\x43\x16\x18\xa4\xc6\x7c\x0a\xb7\x59\x03\x18\x26\x61\xd8\x17\x11\x65\x7c\x4c\xa3\x0f\x3b\xbc\x48\xc2\x10\x02\x23\x96\x39\x6e\xbc\x59\xaf\xd7\xcd\xff\xde\x23\xc7\x8f\x7a\x28\x35\x5b\x30\x9f\x6a\x74\x24\xff\x88\x53\x69\x31\x6c\xb2\x85\x4a\x24\xd2\x47\x48\x03\x02\x07\xce\x74\x7c\x98\xe7\xd5\x99\xb9\x50\x52\x0d\x23\xca\xe9\x12\x25\x1c\x38\xbd\xd1\x21\xf8\x05\xa5\xf9\x5b\x9f\xf7\xa9\xe4\x84\xae\x15\xa1\x7e\x44\x9a\xff\xdb\xaf\x01\xf4\xa8\xbf\xc2\x5b\x1a\x26\xe8\x79\x57\x65\x9c\xe3\x24\x9a\xa3\xcc\x71\x2e\x68\x12\x6a\x02\x9d\x56\xab\xac\xd7\x88\x29\x02\xe6\x0e\xc0\x82\x93\xd6\xf6\xd8\xb6\x8b\xf3\x46\x2c\x63\x29\xce\xa7\xf9\xb9\x9a\x5c\xef\x0a\x84\x39\x2b\x68\x37\xc0\x6e\xc0\x71\x03\xda\xad\x06\xb4\x8f\x21\x62\x5c\x65\xd6\x6a\x23\x1a\xc7\x8c\x2f\x4d\xbb\x4c\x71\xc9\x04\x1f\xd1\x38\xc3\x9f\x28\x0b\xa9\xd2\x56\x9b\xe4\x96\xdc\x4e\xd1\x50\x17\x01\x81\xfb\x8e\xf3\xad\xeb\x7a\x67\xc3\xbb\x4b\xd7\x1b\x6e\x64\xd6\xf8\xa6\x8c\x3d\x3c\x3e\xb9\xb9\xbf\xb2\x47\x6d\xa7\xd7\xaf\xc8\xd8\xaf\xdb\xe9\x5e\x9e\x7c\x3d\x99\x5e\x5c\x5c\x8f\x3f\x8f\x0c\x13\x26\xef\xd9\x69\x77\xbf\xf6\xbc\xef\xfd\xcf\x47\x83\xfb\xc9\xc0\x30\xd1\xd8\x52\x22\xd1\xab\xf7\x9c\xba\x6e\x5d\xda\xfd\xef\xdd\x41\x7b\xe8\x75\x77\x05\x5f\x47\xd9\x9e\xf5\x2e\xce\xee\x2e\x7a\x63\xbb\x7b\xd7\xdf\x08\x72\x21\xdf\xb5\x68\x8f\x8e\x06\xe7\x37\x53\xfb\x64\xf2\xf9\x7e\x66\x98\x14\x7d\x37\xf4\xed\xb3\xa1\xd7\xba\x71\xda\x17\xf6\xf9\x6d\x6d\x53\xe9\x8a\xd4\x6a\x00\xb3\x6c\x80\xf6\x42\x91\x04\x0b\x29\xb8\x2e\xd7\xa3\x33\x73\x09\x31\xa4\xa1\x21\x91\x3e\x53\x5a\xb2\x79\x92\x96\x4a\x5e\x46\x31\xf2\x40\x5d\xe7\xed\x66\x6d\xf4\x75\xb3\x11\x9b\xde\x4d\xa4\x88\xd3\x26\x41\xb5\x01\x58\xd6\xd2\x33\x03\x7e\x43\x49\xfb\x3f\x4a\x47\x08\x81\x02\x51\x85\xbf\x32\xcc\xb7\x7b\xa2\x10\x4f\x94\x16\xd1\x40\x4a\x21\xa7\xa8\x62\xc1\x55\x61\x36\x85\x67\x28\x69\xff\x31\xbe\x1c\x31\x9e\xf6\x5f\xa9\x55\xd2\x5f\xc6\x21\x02\x24\x70\xd4\x3a\x2a\x11\x36\xfa\x32\x9a\x5d\x11\xda\xd0\x26\x74\x89\x13\xaa\x57\x04\xf6\x3f\x31\x1e\xe0\xcf\xe6\x4a\x47\xe1\xfe\x96\xf3\x5a\xb2\x25\xe3\x15\x44\xa5\x31\x0c\x7b\x2e\x86\xe8\x6b\x78\xb0\x1b\xb0\xe7\xc6\x21\xd3\xf0\xb0\xff\x69\xbf\x01\x7b\x67\xa8\x1d\xad\xab\xd1\x6d\xe6\xff\x6e\xa6\x57\x8f\x8f\x25\x30\x69\xce\xdd\x4e\x66\xaa\x74\x9d\x85\x26\xbb\x7e\x19\xf5\xf4\x77\xee\x79\x93\x89\x90\x9a\x40\xfd\xff\xad\xfa\x0e\xc9\xcd\x69\x47\x47\x9d\x2a\x31\xd3\x38\x91\x42\x0b\x5f\x84\x13\x11\x32\xff\x99\xc0\x4a\xeb\xd8\x12\x3c\x7c\xde\xf2\x0e\x38\x9d\x87\x18\x10\xd0\x32\xc1\xed\xed\xb9\xd6\x71\xf1\x38\x48\xa5\xec\x42\x7d\x3e\x04\xa7\x42\xe8\xeb\xf9\x5f\xe8\x6b\x02\x45\x54\xb7\x5c\x4e\xc8\xe8\x8b\x34\xef\x4d\x71\x01\xf5\xea\x96\xdb\x51\x6b\xc6\x70\x17\x57\xf4\x89\x09\x59\x8e\x45\x3e\x6a\x47\xa8\x57\x22\x50\x65\x8a\x05\x67\x03\xaf\xf2\xff\x7c\xe0\xf4\x4b\x17\xb9\x6a\x53\x57\x06\x44\x65\xd6\x97\x18\x47\xf4\xe7\x07\x98\xf2\x0a\x7d\x93\xa9\x27\xa2\x58\xa2\x52\x2f\x02\x0b\xe0\x51\xb9\x44\x9d\xa5\xe7\x95\x9a\x18\x0a\xb9\xa6\x32\xd8\xae\x95\x4a\x62\xbf\x25\x28\x9f\xb3\xd5\xb9\xa3\x3b\x35\x2b\x7e\xb0\x97\x22\x5b\x8d\x04\xb8\xe0\x65\x81\x5b\x86\x6b\x94\x2f\xab\x44\x62\xc0\x24\xfa\xda\xd2\xc2\x4a\x73\xaf\xb6\x12\x13\xc9\x7c\xec\x85\x34\xf5\xab\x38\xff\xe9\x84\x45\xde\x33\x95\xa5\xd5\x5c\xc9\xe1\xce\x7b\x20\x8b\xe2\xce\x7d\x49\xc6\x55\xa1\x9b\xc4\xb1\x90\x3a\x4b\x3d\x01\xc5\x59\x56\xc4\xc5\xa4\xec\x8f\xdd\x97\x6f\x26\x33\x26\xcd\x73\xef\xb8\x43\xc8\xd4\x3c\x3a\x5d\xd4\x67\x52\x24\xf1\x2b\x23\xb0\x98\xd0\x79\xe7\x5f\x0a\xc6\xe1\xa1\x5e\x6f\xc0\x43\x56\xbc\x05\x47\xbd\x01\xcd\x6d\x83\x6f\xb5\x6f\x55\x59\x90\xab\x78\xb3\xe6\x73\xa4\xd5\xa6\xc9\x2a\xa4\x1c\xb6\x9d\x05\xdc\xf7\xc6\x7d\xc7\x73\xbe\xdd\xcd\xec\x72\x99\xe7\x41\xd8\x0e\xa6\x87\x9d\x3d\xd2\x28\x4d\xb6\xc7\xda\x75\xa2\xe3\x24\xc3\x9c\x0d\xaf\x22\x86\xa6\xf4\x36\xf0\x2b\x03\xae\xbe\xfb\x52\x19\xe7\xef\xed\xe2\x0b\x41\x0b\x58\x89\x30\xd8\x7c\x09\xa4\x5f\x0c\x1a\x79\xba\x11\x0a\x2c\x03\x1e\x98\xb5\x51\x35\xf8\x41\xe8\x3b\x18\x36\xda\xcc\x17\x49\x69\x4d\x05\xd5\xe5\x58\x64\xe2\x37\x7e\xfe\x2e\x4d\x15\x23\x29\x43\x09\x46\xad\xf6\x6f\x00\x00\x00\xff\xff\x4f\x0f\x25\xa5\x53\x0d\x00\x00")

func s3siteYmlBytes() ([]byte, error) {
	return bindataRead(
		_s3siteYml,
		"s3site.yml",
	)
}

func s3siteYml() (*asset, error) {
	bytes, err := s3siteYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "s3site.yml", size: 3411, mode: os.FileMode(420), modTime: time.Unix(1535157721, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0x9c, 0x39, 0xf1, 0x51, 0x82, 0xac, 0x24, 0xcc, 0x42, 0x99, 0x88, 0xbf, 0xe1, 0x1b, 0x61, 0x76, 0x5b, 0xbc, 0x14, 0xaf, 0x23, 0x47, 0x9d, 0xd9, 0xe9, 0xea, 0x3a, 0x95, 0xfb, 0x67, 0xb5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fullSite.yml": fullsiteYml,

	"s3site.yml": s3siteYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fullSite.yml": &bintree{fullsiteYml, map[string]*bintree{}},
	"s3site.yml":   &bintree{s3siteYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
